{
	"limit": 100,
	"total": 152,
	"results": [{
		"id": 333,
		"url": "/sucuri",
		"name": "Sucuri",
		"meta": {
			"bug_count": 39,
			"accepting_submissions": true,
			"minimum_bounty": 250,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Security Company Focused on Website monitoring, protection and remediaton. Used by more than 100,000 sites worldwide.",
		"stripped_policy": "Sucuri Vulnerability Disclosure (Bug Bounty)\nWe take the security of our sites, users and data very seriously and we started this bug bounty program to make easier for researchers to report vulnerabilities to us.\nReported bugs will be assessed by our security team to determine if they qualify for a reward. If you find any vulnerability, please report them right away. We will  try to review any submission in less than 7 days.\nThe more severe the issue, the highest the reward.\nAll reports must include a POC (proof of concept) and details on how it can be misused.\nScope\nAny web properties owned by Sucuri (*.sucuri.net) are in the scope for this program. It also includes our WordPress and Joomla Plugins. \nTargets\n*.sucuri.net\nRewards\nQualifying bugs will be rewarded based on severity. Our minimum reward is $250 USD. \nFor more severe issues, including remote code execution, SQL injections, remote file include or any type of shell access, the reward will be higher (up to $5000).\nYou will also get a thanks note on our site.\nOut of Scope\nAny Sucuri customer website are out of the scope of this disclosure program. \nAlso, the following do not quality:\nDoS, brute force, user enumeration or DDoS attacks\nPhysical attacks.\nBugs that rely on Social engineering.\nCRIME/BEAST attacks\nBanner or version disclosures.\nMissing SPF\nDirectory listing (unless you can find sensitive data)\nLinks to SSLabs or about external cookies not being \"secure\" or \"httponly\". \nPlease do not report about brute force attempts on our login or password reset forms. CSRF only qualifies if it can be misused against any of our users. CSRF on our free scanner or our search box is not covered.\n",
		"handle": "sucuri",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/333/a2381369866ab9f9c796f5b22bc735146f3b1e59_large.png?1407284995",
		"internet_bug_bounty": false
	},
	{
		"id": 297,
		"url": "/wp-api",
		"name": "WP API",
		"meta": {
			"bug_count": 4,
			"accepting_submissions": true,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Access your WordPress site’s data through an easy-to-use HTTP REST API.",
		"stripped_policy": "WP API is responsible for WordPress site data from posts to users, including private data. While we've taken every effort to consider security and privacy concerns while building the API, all software has bugs. If you believe you've found a security issue in the API, we want to work with you to ensure the issue is fixed and distributed to users as quickly as possible.\nScope\nThe scope of this project is limited to the latest version of any of the following projects running on WordPress 3.9 or newer:\nHigh Priority\nJSON REST API plugin (http://wordpress.org/plugins/json-rest-api/) (WP API)\nOAuth 1.0a server plugin (https://github.com/WP-API/OAuth1)\nMedium Priority\nJavascript client (https://github.com/WP-API/client-js)\nWP-CLI client (https://github.com/WP-API/client-cli)\nPHP client library (https://github.com/WP-API/client-php)\nLow Priority\nAPI console (https://github.com/WP-API/api-console)\nBasic authentication (https://github.com/WP-API/Basic-Auth)\nWP-API.org (https://github.com/WP-API/WP-API.github.io)\nYou should install a copy of the project and WordPress on your own server. Do not test on servers you do not own.\nWhile we take compatibility with other plugins seriously, it is at our discretion as to whether we accept issues caused by interactions with other plugins. If we decide to accept these issues, we will also attempt to work with the other plugin developers to resolve the issue.\nSevere issues include (but are not limited to) remote code execution exploits, SQL injection, and privilege escalation. Severity will be assessed at the team's discretion.\nResponse\nWe will attempt to respond to reports within a week at latest, typically within 48 hours. (Keep in mind that we are distributed across timezones, and this may cause a delay if we need to discuss internally.) Severe issues will be handled as soon as possible, while all other issues will be handled as part of our normal bug triaging process.\n",
		"handle": "wp-api",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/297/78a7b7869f34c0408b19416794900220b829580d_large.png?1405492228",
		"internet_bug_bounty": false
	},
	{
		"id": 293,
		"url": "/digitalsellz",
		"name": "DigitalSellz",
		"meta": {
			"bug_count": 27,
			"accepting_submissions": true
		},
		"about": "Planning to sell your files? Need a platform to sell your new e-book? May be just music, photos, articles, digital art or movies? Try DigitalSellz.com",
		"stripped_policy": "We take security issues seriously. If you are the first to report a verifiable security issue, we'll thank you with a place at our hall of fame page. \nWe only are looking for bugs on website https://www.digitalsellz.com:443\nIMPORTANT: \n1. PLEASE NOTE THAT AUTOMATED TESTING IS NOT PERMITTED! SYSTEM WILL BAN YOU PERMANENTLY IF YOU DO.\nPLEASE DO NOT UPLOAD LARGE FILES WHEN DOING TESTING\nScope:\nCross-Site Scripting (XSS)\nCross-Site Request Forgery (CSRF/XSRF)\nBroken Authentication\nRemote Code Execution\nPrivilege Escalation\nSql Injection\nWe are mainly interested in HIGH IMPACT bugs. \nThis builds upon our disclosure guidelines/philosophy here: https://hackerone.com/guidelines\nExclusions\nBrute-force attacks on login, DOS Attacks or information leaks via error messages in login\nClickjacking attacks\nVersion disclosure issues, unless there are known vulnerabilities for that version\nDenial of service vulnerabilities\nSpam or social engineering techniques\nBugs in third-party libraries or services used by digitalsellz.com\nSSL Services are out of scope\nSession Cookie configurations\nLogout related bugs.\nPlease Note:\nWhen reporting a bug please provide a working example (PoC) and steps to reproduce.\n",
		"handle": "digitalsellz",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/293/e5e49a60d6498bf7066b21b955f5514c66d0325b_large.png?1405460051",
		"internet_bug_bounty": false
	},
	{
		"id": 265,
		"url": "/expressionengine",
		"name": "ExpressionEngine",
		"meta": {
			"bug_count": 83,
			"accepting_submissions": true
		},
		"about": "ExpressionEngine is a robust and flexible Content Management System.",
		"stripped_policy": "PLEASE NOTE: This program is for the downloadable self-hosted application ExpressionEngine (https://store.ellislab.com/), not the EllisLab.com web site. Reports will not be considered that are the result of scans or intrusion attempts of the web site, and such activity is a violation of our web site's terms of use.\nWe take security issues very seriously, and encourage responsible reporting with a high priority on making security fixes or patches available rapidly, prior to any public disclosure of the vulnerability. We find this is the best balance of giving security issues the attention they rightly deserve, and protecting end users and site visitors from malicious individuals and script kiddies.\nAll software has vulnerabilities, but when we work together with developers and researchers, we can all help make the Internet a safer and better place. We love to acknowledge researchers who make valid security reports and work with us, and while we do not have a bounty program, sometimes will donate software or swag for being classy.\nWhat are Security Issues?\nWhen we speak about security related bugs, we are most interested in:\n  Cross-site Scripting (XSS) (http://en.wikipedia.org/wiki/Cross-site_Scripting)\n  Cross-site Request Forgery (CSRF) (http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n  Privilege Escalation (http://en.wikipedia.org/wiki/Privilege_escalation)\n  Session Hijacking (http://en.wikipedia.org/wiki/Session_hijacking)\n  Arbitrary Code Execution (http://en.wikipedia.org/wiki/Arbitrary_code_execution)\nMaking Good Security Reports\nWe don’t have rigid guidelines for what a security bug report should include, as we want to minimize barriers—ultimately we just want to receive the information. That said, the best security reports not only describe the vulnerability, but include a proof of concept as well as how it might be exploited in a realistic situation. Bonus points for including your recommended solution.\nOn the converse, security reports that are merely the output of penetration testing software are generally not only unhelpful, but typically contain false-positives as the software cannot grasp the context or implications of a piece of code that checks off one of the items on the vendor’s preset list of vulnerabilities.\nSince our team only speaks English all security reports must be made in English, and communication will be in that language.\nReporting and Disclosure\nOnce you have reported the security issue, a number of steps will be taken to assess and address the reported issue prior to disclosure.\nThe report will be triaged within 48 hours to determine if the issue is a legitimate security issue. Issues reported on weekends or U.S. holidays may take 72–96 hours to be triaged.\nImmediately after being triaged, an engineer will be assigned as the owner of the issue and will contact you regarding your report.\nIf confirmed, the engineer will set to work on resolving the issue, providing the reporter with a patch to test the prospective fix.\nWe try to have all security issues fixed within two weeks of being triaged, often much more quickly. All valid security reports have a high priority, but will be addressed in a relative priority based on:\nWhether a known exploit is in the wild\nThe severity of the exploit\nThe likelihood of user impact\nComplexity of the issue\nIn any case, the engineer assigned to the issue will maintain regular contact with the reporter throughout the process, at minimum once per week.\nThe security bug fix will typically be included in the next software release. Depending on the priority conditions above and how distance the next planned release is, we may issue a release and/or patch that only addresses the reported security bug.\nWe disclose in our application Change Log (http://ellislab.com/expressionengine/user-guide/about/changelog.html) that a security bug has been fixed, and what type. We do not disclose the steps or circumstances to reproduce the bug.\nReleases are posted to our blog (http://ellislab.com/blog), and for users who have left the default feature enabled, receive notification when logged in to their control panel.\nPublic disclosure of a security bug prior to resolution makes our engineers and customers quite unhappy, and will not be met with gratitude.\n",
		"handle": "expressionengine",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/265/04125ea6babc5c8b24845632fb64765037caaba1_large.png?1403902124",
		"internet_bug_bounty": false
	},
	{
		"id": 257,
		"url": "/envoy",
		"name": "Envoy",
		"meta": {
			"bug_count": 73,
			"accepting_submissions": true
		},
		"about": "Envoy's mission is to have awesome visitor and host experiences become universal in the workplace",
		"stripped_policy": "Thanks for considering to pen-test our service! We recognize the importance of security researchers in helping keep our community stay safe and appreciate you spending your time with us.\nRules for pen-testing Envoy - READ THESE BEFORE DOING ANYTHING\nDo not use any automated tools of any kind. It disrupts our service and the bugs found by them will all be dupes.\nDo not spam our Contact Us or Invite forms and do not start a Livechat session trying to XSS the chat window. In general, do not test our vendors' systems; only test our application.\nDo not test for BREACH or any other high-request-volume issues. Never test to make sure our rate limits work.\nSubmit only bugs which you have actually tested and found a problem. Do not submit generic reports about a problem \"possibly\" existing. We need specific attack vectors.\nJust because you got a 500 from your malformed request doesn't mean you've discovered a buffer overflow.\nDo not send us \"Security Best Practices\" reports. We already know about these.\nWe are running the latest version of Rails on Heroku and we're behind Cloudflare. Do not try things like accessing IIS directories (or Windows-specific stuff), accessing FTP or SSH ports, or similar things that obviously wouldn't work on our infrastructure.\nDo not game the HackerOne system. Don't report bugs that don't exist just incase they do so you'll be the first and get the credit. We will work with HackerOne to ban your account.\nDo not harass us asking for rewards or cash or bounties. We will offer you something like an Envoy tshirt (or possibly more) if we feel the report is serious enough. We want to reward you for your work, but clicking an Attack button on some tool you downloaded off the internet is not a way to get rewarded.\nPlease, only report issues that are very clearly security problems. If in doubt, don't submit it.\nYou must be 18 years of age or older. Please be an adult when messaging us. We want to work with serious security professionals only.\nKnown Issues (please don't report these):\n- DMARC settings not enforced for all email\n- Password reset and login pages allows verification of guessed usernames\n- Changing email address does not invalidate unused password reset links\n- Usernames can include URLs, which will be included in emails and notifications\n- Some functionality sends emails, and it may be possible to blast a lot of messages at a single user\nIf we find that you're in violation of any of these rules we will reject all of your reports and ignore you. We simply ask that you be respectful and we'll do the same with you :)\nIt shouldn't need to be said but please respect our servers and users. We'd love to credit you for your work, but attacking our service is not the way to get recognition. \nFor HackerOne users, you can sign up here: https://web.envoy.com/users/sign_up?plan=premium Please include HackerOne somewhere in your Company Name so we know not to get sales people on you. :)\nAgain, we appreciate your help in making Envoy super secure and reliable for everyone.\nThanks! :)\n",
		"handle": "envoy",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/257/89b498c18e69a1a179e2fc26274d58c0f4404024_large.png?1470156743",
		"internet_bug_bounty": false
	},
	{
		"id": 110,
		"url": "/wepay",
		"name": "WePay",
		"meta": {
			"bug_count": 112,
			"accepting_submissions": true,
			"minimum_bounty": 100,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Payments partner to the platform economy",
		"stripped_policy": "WePay Bug Bounty Program Rules\nWePay asks that tests are performed against stage-go.wepay.com, stage.wepay.com and stage.wepayapi.com.  Our public staging server runs the same code as production. Create as many test accounts there as you feel necessary; actual customer data is strongly discouraged for exploits — a reproduce case will suffice. One report to cover both domains is sufficient; please perform testing against stage.wepay.com to prevent service interruption to our customers.\nVulnerabilities that may be specific to server configs (SSL settings, etc) may also be tested on www.wepay.com and wepayapi.com, as the environments may be configured differently.\nAttributes of a good report:\nOnly one issue per report.\nSummarize the Security issue in a single sentence\nDescribe detailed steps for reproducing the bug. If possible, please include video or screenshots, links you clicked on, pages visited, etc.\nElaborate Security implications of the issue. How will the problem affect WePay, our users or our partners? What's the worst thing that could happen if an attacker takes advantage of this security flaw.\nFunctioning exploits are worth more money than reports that are copy-pasted from other security-related websites. A screenshot is much less useful than a video, and a functioning exploit will always have real code. Showing that there's a potential issue is less valuable than exploiting a real issue.\nWith Regard to Duplicates\nIf we have already received a report of a similar issue, which we believe would be resolved by the same fix that would resolve your issue, then we will mark your issue as a duplicate because the root-cause is the same.\nWith Regard to Reputation\nIf you make an effort to file a legitimate issue, and it is not necessarily a valid issue, we will generally close it as Informational (+0) — UNLESS it is clear that you made no effort to read these Guidelines, in which case we may choose to close as Not Applicable (-5) if the case is particularly egregious.\nFollowing categories of issues will be marked N/A:\nCopy-pasting reports from another site or submitting reports, without providing any evidence that the vulnerability actually exists.\nIssues for domains listed in Out-of-scope domains section\nIssues mentioned under out-of-scope vulnerabilities.\nScope\n\"Typical\" web vulnerabilities are generally considered in-scope. This includes, but is not limited to:\n* Remote Code Execution (RCE)\n* Cross Site Scripting (XSS)\n* Cross Site Request Forgery (CSRF)\n* Privilege Escalation\n* Session Hijacking\n* Leaking of sensitive customer data (especially anything in the scope of PCI)\nScope Exclusions\nOnly software-based issues are eligible for reward, things such as physical attacks against our offices or data centers do not qualify, nor do social engineering attacks. Protocols or standards not developed by WePay are similarly excluded, as are \"non-optimal\" protocol settings (e.g., RC4, SSLv3) unless said settings are directly exploitable. If in doubt please report it :)\nOut-of-scope domains include, but are not limited to:\n* e.wepay.com (Marketo (https://www.marketo.com/))\n* status.wepay.com (StatusPage.io (https://www.statuspage.io/security))\n* support.wepay.com (Zendesk (https://www.zendesk.com/company/responsible-disclosure-policy/))\n* t.wepay.com (ThreatMetrix (https://www.threatmetrix.com/))\n* visit.wepay.com (Marketo (https://www.marketo.com/))\n* doyouplatform.com\nOut of scope vulnerabilities include but are not limited to:\n* Issues related to software not under WePay's control \n* Reports from automated web vulnerability scanners that are not validated.\n* Issues that need social engineering for successful exploitation.\n* Any physical attempts against WePay property or data centers\n* Social engineering attacks against WePay employees\n* Missing autocomplete attributes.\n* Missing security flags on non-security-sensitive cookies.\n* Username or Email enumeration.\n* Missing Best practices.\n* Spamming\n* Issues that require physical access to a victim’s computer for successful exploitation.\n* Open ports without an accompanying proof-of-concept demonstrating vulnerability.\n* XSS issues that affect only outdated browsers.\n* Tab nabbing and window.opener-related issues.\n* Phishing using Open Redirection. Exceptions: Open redirection that leads to leakage of OAuth Access Token, bypass of Content Security Policy,etc.\n* Content Injection issues\n* CSV Injection. Please see this article (https://sites.google.com/site/bughunteruniversity/nonvuln/csv-excel-formula-injection)\n* Banner grabbing issues (Finding info like webserver name, etc.)\n* Cross-site Request Forgery (CSRF) with minimal security implications like Logout CSRF\n* Issues related to SPF,DKIM, and DMARC\n* Error Stack Trace or 401/403/500 Server error without an accompanying evidence of vulnerability\n* Self-XSS including cases where user himself pastes javascript code into the browser.\n* Issues without clearly identified security impact, such as clickjacking on a static website, descriptive error messages, HTTP OPTIONS method enabled, etc.\n* Issues related to Payment Fraud.\nOur SDKs are also ineligible for reward, as is other software open-sourced by WePay (such as that found on https://github.com/wepay). \nToo many duplicates have been filed and we will reject all new reports out-of-hand as N/A\n* Clickjacking (we're actively working on this)\n* Brute Force protection on login page\nRewards\nOnly security vulnerabilities qualify for rewards, which start at $100 and will increase based on severity and scope. Reports of non-security issues are appreciated, but will not qualify for a reward and will be marked informative. WePay's security team reserves final judgment regarding rewards.\nWhile we certainly appreciate reports of a possible issue, the lack of a functioning exploit against the possible vulnerability means that most of these reports will not be eligible for a bounty. If we determine that your report is exceptional and is bounty-worthy, it will be paid-out from the bottom-end of the reward scale.\nAutomated Scanning\nIf you employ automated scanning tools, their requests must be rate limited to not exceed 3 requests per second without prior approval. Failure to do so may be considered a DoS attack and will result in disqualification from the program.\nAutomated vulnerability scanners commonly have low priority issues and/or false positives. Before submitting the results from a scanner, please take a moment to confirm that the reported issues are actually valid and exploitable. Please submit an issue only if you have exploited a real vulnerability (see Scope Exclusions, below)\nEligibility and Responsible Disclosure\nYou will qualify for bounty eligibility only if you are the first person to responsibly disclose an unknown issue. We intend to respond and resolve reported issues as quickly as possible, but please allow up to 14 days for a response and 90–120 days for a resolution (if we expect resolution to take longer, we will be upfront about this).\nIssues not disclosed through HackerOne or by directly emailing security@wepay.com are ineligible and may result in removal from the program.\nTools\nZero members of our staff use Microsoft Windows, so videos which use Windows-specific tools are not helpful for reproducing issues. Videos should contain steps that can be reproduced without leveraging features that are specific to a single tool that is only available for Microsoft Windows.\nWe use Linux or OS X for everything. If your functioning exploit leverages a command-line tool, it should be a tool which works on OS X (Darwin), RedHat-based Linuxes (e.g., RHEL, CentOS) or Debian-based Linuxes (e.g., Debian, Ubuntu). If your functioning exploit leverages a GUI tool, it should be a tool which works on OS X.\nVideos\nPlease use modern codecs and containers when submitting videos.\nH.264 video + AAC audio + MP4 container is overwhelmingly preferred.\nNon-Standardized codecs and containers (e.g., VP8, VP9, MKV, WebM, Ogg) are not preferred, but still acceptable.\nOutdated codecs and containers (e.g., Microsoft Video 1, VC-1, AVI, WMV, FLV, H.263, Theora, VP6, VP7) is discouraged.\n",
		"handle": "wepay",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/110/fa0e088e2bf1f6b52f699cb51ee42a7e7bf01402_large.png?1432925555",
		"internet_bug_bounty": false
	},
	{
		"id": 48,
		"url": "/mavenlink",
		"name": "Mavenlink",
		"meta": {
			"bug_count": 104,
			"accepting_submissions": true
		},
		"about": "Mavenlink provides sophisticated software and services to help organizations conduct business online, improve productivity, and grow profitably.",
		"stripped_policy": "Mavenlink makes the security of our product a top priority and we value the role the security community plays in this process. If you believe that you've found a potential security issue in any of our products, please let us know right away. We're committed to working closely with anyone with a desire to help keep users safe.  We investigate all reports.\nResponsible Disclosure Policy\nIf you give us a reasonable amount of time to respond, verify, and fix your report before making any information public, and you make a good faith effort to avoid privacy violations, destruction of data, or degradation of our service during your research, we will not bring any lawsuit against you or ask law enforcement to investigate you.\nSecurity Research Guidance\nPlease conduct your research in a manner that does not negatively impact other users of our service, either by degrading their experience, or by violating their privacy.\nMake a good faith effort to avoid accessing accounts or data that does not belong to you.\nDo not interact with other users without their permission.\nRefrain from using or reporting Denial of Service or Social Engineering attacks.\nPlease do not use automated scanners or fuzzers, as they may affect our quality of service.  All security testing must be manual.\nPlease do not just copy and paste reports from other closed HackerOne tickets. Make sure you do your own work, and that you verify that a bug is actually valid.\nScope of Responsible Research\nPlease do not submit the \"Request a Demo\", \"Request Access\", or \"Live Chat\" forms, as they require time from our support and sales teams. Testing of these features is outside the scope of our Responsible Disclosure Policy.\nThe following domains are in scope for this Responsible Disclosure Policy:\nOur marketing website (https://www.mavenlink.com)\nOur main application (https://app.mavenlink.com)\nOur HTML5 mobile app (https://m.mavenlink.com)\nOur API (https://api.mavenlink.com)\nVulnerabilities in scope include:\n* XSS vulnerabilities\n* Missing CSRF tokens\n* Remote code execution\n* Unauthorized data access\n* Any other attack that can likely result in unauthorized access to our systems or to users’ data\nPlease note that the following techniques and issues are not currently in scope:\n* Bugs that affect only legacy browsers\n* Potential attacks that would require direct access to a user's computer\n* Attacks that would require exceedingly unlikely user interaction\n* Denial of service attacks\n* Social engineering attacks\n* Minor information leakage (such as web server version)\n* Insecure cookies (all necessary cookies are marked as secure)\n* Clickjacking on the login page\n* Ratelimiting\nThe following domains are not currently in scope:\nstart.mavenlink.com\ngo.mavenlink.com\nblog.mavenlink.com\nmavengineering.com\nWe are mainly interested in specific security bugs. While you are welcome to submit \"best practices\", chances are that we are already aware of and have considered them.\nGetting a test account\nIn order to test our full feature set, we recommend signing up for a free trial Premier account (https://www.mavenlink.com/signup/premier?utm_campaign=hackerone).\nThanks!\nWe believe in giving credit where credit is due. If our customers end up more secure as a result of your work, we'll credit your discovery in our Security Hall of Fame (https://hackerone.com/mavenlink/thanks). We may also offer small bounties at our discretion.\nDuplicate reports\nIf more than one person submits the same issue the recognition will go to the first reporter. Please see the HackerOne guidelines (https://hackerone.com/guidelines) for more info.\nAbout Mavenlink\nMavenlink delivers enterprise-grade Software as a Service (SaaS) that transforms how businesses work with distributed teams, contractors and clients around the globe. Mavenlink's innovative technology suite enables organizations of any size to successfully manage and scale their people, projects, revenue and profitability. Consulting firms, creative agencies and professional services teams in more than 100 countries are running their businesses more efficiently and more elegantly with Mavenlink. Learn more at www.mavenlink.com.\n",
		"handle": "mavenlink",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/048/a10b441c3a49b43b30b918d60a4f41d8263e6d8c_large.png?1423503428",
		"internet_bug_bounty": false
	},
	{
		"id": 61,
		"url": "/twitter",
		"name": "Twitter",
		"meta": {
			"bug_count": 602,
			"accepting_submissions": true,
			"minimum_bounty": 140,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Twitter helps you create and share ideas and information instantly, without barriers.",
		"stripped_policy": "Program Rules\nMaintaining top-notch security online is a community effort, and we’re lucky to have a vibrant group of independent security researchers who volunteer their time to help us spot potential issues. To recognize their efforts and the important role they play in keeping Twitter safe for everyone we offer a bounty for reporting certain qualifying security vulnerabilities.  Please review the following program rules before you report a vulnerability.  By participating in this program, you agree to be bound by these rules.\nRewards\nTwitter may provide rewards to eligible reporters of qualifying vulnerabilities. Our minimum reward is $140 USD.  There is no maximum reward. Rewards are paid out on Fridays. The following table outlines the usual minimum rewards for specific classes of vulnerabilities for in-scope properties (see section on Scope). \n|Vulnerability | Core Twitter [1]| All Other |\n------------- | -------------| -------------|\n|Remote Code Execution | $15,000| $10,000|\n|Significant Authentication Bypass [6] | $7,500| $5,000|\n|Cross Site Scripting that can perform critical actions [2] [3] [4] [5] | $2,500| $1,500|\n|Cross Site Request Forgery on critical actions [2] [4]| $2,500| $1,500|\n|All other Cross Site Scripting [3] [4]| $1,000| $500|\n|All other Cross Site Request Forgery [4] | $280| $140|\n||||\n[1] Core Twitter covers twitter.com, Twitter for iOS, Twitter for Android and reports permitting takeover of a Twitter account.\n[2] Critical actions include (but are not limited to) tweeting, retweeting, favoriting and direct messaging.\n[3] Excluding self-XSS.\n[4] Divide by half of the All Other amount for MoPub properties\n[5] Divide by half for XSS blocked by Content-Security-Policy settings\n[6] Divide by half for issues that require the attacker to interact with the user\nTwitter will determine in its discretion whether a reward should be granted and the amount of the reward - in particular we may choose to pay higher rewards for unusually clever or severe vulnerabilities or lower rewards for vulnerabilities that require significant or unusual user interaction. This is not a contest or competition. Rewards may be provided on an ongoing basis so long as this program is active.\nScope\nThe following sites and applications are in scope for this program:\n* *.twitter.com\n* vine.co\n* periscope.tv\n* MoPub\n* ZeroPush\n* Twitter for iOS / Android\n* Vine Camera\n* Periscope for iOS / Android\nVulnerabilities reported on other Twitter properties or applications are currently not eligible for monetary rewards (as they come into scope, they will be added to this section). However, they are still eligible for our Hall of Fame (https://hackerone.com/twitter/thanks). High impact vulnerabilities will be considered on a case by case basis.\nReporting Possible Vulnerabilities\nYou must report a qualifying vulnerability through the HackerOne reporting tool to be eligible for a monetary reward.\nIf you have an issue that affects only your own account such as unintended Tweets, DMs, or follows, abuse, harassment, spam, or phishing, please find the appropriate form here (https://support.twitter.com/forms/).\nIf you are researching security issues, especially those which may compromise the privacy of others, please use test accounts in order to respect our users’ privacy. When demonstrating a vulnerability, please do so in an unobtrusive manner to avoid drawing public attention to the vulnerability. Vulnerabilities that are exposed publicly as a part of putting together a proof of concept (e.g. website defacement, stored XSS on a public site) are not eligible for bounty.\nReport Template\nPlease be aware that the quality of your report is critical to your submission. To ensure that we are able to understand what you are reporting and the potential impact, please make sure your report contains the following items. You might want to consider using this as a template or checklist when writing up your report. \nWhat type of issue are you reporting? Does it align to a CWE or OWASP issue?\nHow does a user reproduce your issue? (If this contains more than a few steps, please create a video so we can attempt to perform the same steps).\nWhat is the impact of your issue?\nWhat are some scenarios where an attacker would be able to leverage this vulnerability?\nWhat would be your suggested fix?\nEligibility and Responsible Disclosure\nWe are happy to thank everyone who submits valid reports which help us improve the security of Twitter!  However, only those that meet the following eligibility requirements may receive a monetary reward: \nYou must be the first reporter of a vulnerability. \nThe vulnerability must be a qualifying vulnerability (see below) associated with a site or application in scope (see above).\nWe can’t be legally prohibited from rewarding you (for example, you can’t be a resident of or located within Cuba, Sudan, North Korea, Iran or Syria, a national of other certain countries, or on a denied parties or sanctions list). \nYou may not publicly disclose the vulnerability prior to our resolution.\nQualifying Vulnerabilities\nAny design or implementation issue that is reproducible and substantially affects the security of Twitter users is likely to be in scope for the program. Common examples include:\nCross Site Scripting (XSS)\nCross Site Request Forgery (CSRF)\nRemote Code Execution (RCE)\nUnauthorized Access to Protected Tweets\nUnauthorized Access to DMs\nWhen in doubt, consider what an attack scenario would look like. How would the attacker benefit? What would be the consequence to the victim? The (Google Bug Hunters University guide (https://sites.google.com/site/bughunteruniversity/improve/writing-the-perfect-attack-scenario)) may be useful in considering whether something has impact.\nNon-Qualifying Vulnerabilities\nDepending on their impact, not all reported issues may qualify for a monetary reward. However all reports are reviewed on a case-by-case basis and any report that results in a change being made will at a minimum receive Hall of Fame recognition.\nPlease refrain from accessing private information (so use test accounts), performing actions that may negatively affect Twitter users (spam, denial of service), or sending reports from automated tools without verifying them.\nThe following issues are outside the scope of our vulnerability rewards program (either ineligible or false positives):\nAttacks requiring physical access to a user's device\nForms missing CSRF tokens (we require evidence of actual CSRF vulnerability)\nLogout CSRF\nPassword and account recovery policies, such as reset link expiration or password complexity\nInvalid or missing SPF (Sender Policy Framework) records\nContent spoofing / text injection\nIssues related to software or protocols not under Twitter control\nReports of spam (see here for more info (https://support.twitter.com/articles/64986-reporting-spam-on-twitter))\nBypass of URL malware detection\nVulnerabilities only affecting users of outdated or unpatched browsers and platforms\nSocial engineering of Twitter staff or contractors\nAny physical attempts against Twitter property or data centers\nIssues without clearly identified security impact, such as clickjacking on a static website, missing security headers, or descriptive error messages\nFabric was acquired by Google as of January 25th, 2017. Any vulnerability or bug submissions for Fabric, including Crashlytics and Answers, will need to be submitted here (https://g.co/vulnz)\nThe Fine Print\nYou must comply with all applicable laws in connection with your participation in this program.  You are also responsible for any applicable taxes associated with any reward you receive.\nWe may modify the terms of this program or terminate this program at any time.  We won’t apply any changes we make to these program terms retroactively. \nReports received prior to the paid bug bounty program launch (10:30 AM PST on September 3, 2014) are not eligible for monetary rewards.\n",
		"handle": "twitter",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/061/fbd76838535cdeed24934dbc885eaafb31a80fc8_large.?1439954730",
		"internet_bug_bounty": false
	},
	{
		"id": 207,
		"url": "/urbandictionary",
		"name": "Urban Dictionary",
		"meta": {
			"bug_count": 41,
			"accepting_submissions": true
		},
		"about": "The online dictionary with definitions you write.",
		"stripped_policy": "Urban Dictionary Vulnerability Disclosure Policy\nIf you believe you have found a security vulnerability that could impact Urban Dictionary or its users, we encourage you to let us know right away. We will investigate all legitimate reports and do our best to quickly fix the problem. We ask that you follow our Vulnerability Disclosure Policy (this page) and HackerOne's Disclosure Guidelines and make a good faith effort to avoid privacy violations, destruction of data and interruption or degradation of our service during your research.\nScope\nThe domains listed below are in scope for the program. Other domains and subdomains are out of scope.\nThe apps listed below are in scope. Other apps are out of scope.\nhttps://itunes.apple.com/us/app/urban-dictionary/id584986228?mt=8\nhttps://play.google.com/store/apps/details?id=com.urbandictionary.android\u0026amp;hl=en\nIf you are a customer and have a password or account issue, please contact Urban Dictionary support at http://help.urbandictionary.com/. For abuse issues or law enforcement inquiries, please review our Terms of Service at http://about.urbandictionary.com/tos.\nEligibility and Disclosure\nIn order for your submission to be eligible:\nYou must agree to our Vulnerability Disclosure Policy (this page).\nYou must be the first person to responsibly disclose an unknown issue.\nAll legitimate reports will be reviewed and assessed by Urban Dictionary's security team to determine if it is eligible.\nUrban Dictionary's website and services are not intended for, or designed to attract, individuals under the age of 18. Reporters under the age of 18 will not be eligible to receive rewards.\nRewards\nFor each eligible vulnerability report, the reporter will receive recognition on our HackerOne Hall of Fame.\nExclusions\nThe following conditions are out of scope for the vulnerability disclosure program.\nPhysical attacks against Urban Dictionary employees, offices, and data centers.\nSocial engineering of Urban Dictionary employees, contractors, vendors, or service providers.\nKnowingly posting, transmitting, uploading, linking to, or sending any malware.\nPursuing vulnerabilities which send unsolicited bulk messages (spam) or unauthorized messages.\nAny vulnerability obtained through the compromise of a Urban Dictionary customer or employee accounts. If you need to test a vulnerability, please create a free account.\nThanks\nThanks to HackerOne for providing this service, and to 4chan (/4chan) and CloudFlare (/cloudflare) for creating templates to work from. We look forward to hearing from you.\n",
		"handle": "urbandictionary",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/207/c02a076c25a4824d75f8824311926750fad7dd68_large.png?1400430635",
		"internet_bug_bounty": false
	},
	{
		"id": 194,
		"url": "/kadira",
		"name": "Kadira",
		"meta": {
			"bug_count": 35,
			"accepting_submissions": true
		},
		"about": "Performance Monitoring for Meteor",
		"stripped_policy": "Kadira (https://kadira.io/) is committed to working with security experts across the globe to stay up to date with the latest security techniques. If you have discovered a security issue that you believe we should know about, we'd welcome working with you. Please let us know about it and we'll make every effort to quickly correct the issue.\nTHANKS\nWe believe in recognizing the work of others. If your work helps us improve the security of our service, we'd be happy to acknowledge your contribution in our Hall of Fame (https://hackerone.com/kadira/thanks). \nHow to use Kadira\nPlease use https://ui.kadira.io/ to create your account\nWe are using a lightweight client package (https://atmospherejs.com/package/kadira) which needs to be installed on the application is being monitoring\nPlease follow this guide (https://kadira.io/academy/getting-started-with-kadira/) to get started with Kadira\nI recommend to use Telescope (http://telesc.pe/) Meteor application as the application is being monitoring with Kadira (Kadira is not responsible for the issues occurred on Telescope)\nScope\nWe are looking for security issues on the Kadira web app located at https://ui.kadira.io/\nWe are also looking at security issues with our client package (https://atmospherejs.com/package/kadira)\nThese includes all the communication happening in between client package, Kadira and the user\nOut of Scope\nIssues on the http://support.kadira.io/. We are not maintaining that site.\nIssues on https://kadira.io\nAutomated tests against Kadira webapp or any of our underline services we used to communicate\nDDOS attacks against Kadira webapp or any of our underline services\nSocial Engineering Attacks\nPhishing Attacks\nIssues on any application is being used with Kadira \nInteracting with other accounts without the consent of their owners\n",
		"handle": "kadira",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/194/d4ca5aa42c0d46f6c7fba2f039bd42ec67f8c101_large.png?1400246587",
		"internet_bug_bounty": false
	},
	{
		"id": 198,
		"url": "/joola-io",
		"name": "joola.io",
		"meta": {
			"bug_count": 4,
			"accepting_submissions": true
		},
		"about": "joola is an open-source project that helps businesses embed advanced analytics and visualizations as part of their website.",
		"stripped_policy": "OVERVIEW\njoola is an open source (http://github.com/joola/joola) data analytics and visualization framework that enable businesses to store data within its engine and later display the data securely in their websites using an advanced Javascript SDK.\njoola exposes a set of REST API endpoints responsible for every aspect of the framework, from data store, configuration changes to querying data out. This API is the main scope of this program.\nSCOPE\nThe scope of this program focuses on the REST API (http://docs.joolaio.apiary.io) exposed by joola. While we will consider ANY security issue raised by this program, we hold the below as our main focus points of concern.\nRead more about our API documentation (http://docs.joolaio.apiary.io)\nToken Authorization\nEvery action carried out by joola has an associated security context. The context dictates what permissions and restrictions a user has within the system. This vector focuses on identifying scenarios in which a user can access a restricted API endpoint without a valid token or by impersonating another user.\nREST API Execution Context\nEach API action has a permission associated with it and a user may or may not have a permission to access the API endpoint. The second tier of security happens within the API endpoint itself when a check is made to ensure the user is not trying to access/modify/get a resource that belongs to another workspace.\nData Segregation\njoola exposes a specific REST API endpoint at query/fetch, this enable users to consume data, but only from their workspace. A great concern would be a user managing to access data that belongs to another workspace, this will result in a data leakage.\nYOUR TARGETS\nWe have setup a few options for you to test our software.\nInstall A Local Copy\njoola is free, open source software. You can install a local copy of joola and test against it. It will give you the option to play around with the code and expand your attack vectors. Having a local copy also ensures you'll receive regular code updates, which are frequent.\nbash\n$ git clone http://github.com/joola/joola\n$ git checkout develop\n\nFor more details on setting up joola, please refer to the setup guide (https://github.com/joola/joola/wiki/Setting-up-joola.io).\nor Use our develop Heroku instance\nIf you prefer testing an already running instance we have an heroku deployment available at https://joola-io-example.herokuapp.com. It supports both HTTP and HTTPs connections. Our Heroku instance will get updated on every successful build of the develop branch, meaning that fixes will be immediately available for evaluation following patches/fixes.\nSecurity Tokens\nTo make your life even easier, we have created two users you can play with either post local installation or on the Heroku instance. You can read more about security tokens on our API documentation (http://docs.joolaio.apiary.io)\n?APIToken=apitoken-demo will grant you superuser permissions.\n?APIToken=apitoken-test will grant you limited permissions to the _test workspace.\n?APIToken=apitoken-stats will grant you limited permissions to the _stats workspace.\nSIMPLE RULES\nResponsibly disclose a previously unknown vulnerability directly to us.\nWhen using our Heroku instance, please apply Fair Usage and avoid abuse of the Heroku service.\nThis vulnerability must significantly compromise the security of a typical joola installation.\nDenial of Service and Social Engineering attacks are unlikely to qualify unless particularly clever.\nVulnerabilities on the OS/Provider level are out-of-scope.\nVulnerabilities in other bundled dependencies qualify if they affect a typical joola installation, but are less interesting than vulnerabilities in joola itself.\nGETTING STARTED\nYou can find the source (http://github.com/joola/joola) and start looking for vulnerabilities on GitHub.\nIf you want to get in touch with us to ask questions, you can always find us on gitter (https://gitter.im/joola/joola).\nRESPONSE TIMELINE\nWe will respond to reports within 24 hours.\nWe will fix security issues within 24 hours of confirming them.\n",
		"handle": "joola-io",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/198/ca48d900639ecc7d66875355808a81fd2d059717_large.png?1438768529",
		"internet_bug_bounty": false
	},
	{
		"id": 165,
		"url": "/stopthehacker",
		"name": "StopTheHacker",
		"meta": {
			"bug_count": 54,
			"accepting_submissions": true
		},
		"about": "",
		"stripped_policy": "StopTheHacker + CloudFlare\nStopTheHacker is part of the CloudFlare (https://www.cloudflare.com/) family. Before submitting an issue to us, please make certain you have read CloudFlare's Vulnerability Disclosure Policy (https://hackerone.com/cloudflare). \nScope\nAny domains accessible under *.stopthehacker.com are in scope for the program.\nEligibility and Disclosure\nIn order for your submission to be eligible:\nYou must agree to our Vulnerability Disclosure Policy (https://hackerone.com/cloudflare).\nYou must be the first person to responsibly disclose an unknown issue.\nAll legitimate reports will be reviewed and assessed by our security team to determine if it is eligible.\nRewards\nFor each eligible vulnerability report, the reporter will receive:\nRecognition on our Hall of Fame.\nA limited edition CloudFlare bug hunter t-shirt. CloudFlare employees don't even have this shirt. It's only for you all. Wear it with pride: you're part of an exclusive group.\n12 months of CloudFlare's Pro or 1 month of Business service on us.\nMonetary compensation is not offered under the program.\nExclusions\nThe following conditions are out of scope for the vulnerability disclosure program. Any of the activities below will result in disqualification from the program permanently.\nAutomated vulnerability scanners are not permitted.\nPhysical attacks against StopTheHacker employees, offices, and data centers.\nSocial engineering of StopTheHacker employees, contractors, vendors, or service providers.\nKnowingly posting, transmitting, uploading, linking to, or sending any malware.\nPursuing vulnerabilities which send unsolicited bulk messages (spam) or unauthorized messages.\nAny vulnerability obtained through the compromise of a StopTheHacker customer or employee accounts. If you need to test a vulnerability, please create an account.\nBeing an individual on, or residing in any country on, any U.S. sanctions lists.\n",
		"handle": "stopthehacker",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/165/fc4fe716332194acd674e269436b657d5d70a7ea_large.png?1398291607",
		"internet_bug_bounty": false
	},
	{
		"id": 162,
		"url": "/iandunn-projects",
		"name": "Ian Dunn",
		"meta": {
			"bug_count": 13,
			"accepting_submissions": true,
			"minimum_bounty": 0,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "I'm a WordPress developer who maintains several small open source projects.",
		"stripped_policy": "Scope\nBounties are usually only paid for source code vulnerabilities in the valid targets listed below.\nFeel free to submit vulnerabilities outside that (e.g., an attack against my personal website), but the bounties will usually be smaller, and low-medium severity reports might be declined.\nTop Targets\nWordCamp Talks (https://github.com/imath/wordcamp-talks)\nGoogle Authenticator - Per User Prompt (https://wordpress.org/plugins/google-authenticator-per-user-prompt/) - $100 bonus if you can exploit the custom nonce implementation (https://github.com/julien731/WP-Google-Authenticator/issues/11#issuecomment-215546720) to bypass authentication\nBasic Google Maps Placemarks (https://wordpress.org/plugins/basic-google-maps-placemarks/)\nQuick Navigation Interface (https://wordpress.org/plugins/quick-navigation-interface/)\nOther Targets\nAny plugin listed on my WordPress.org profile (https://profiles.wordpress.org/iandunn/), except for these:\nEmail Post Changes and Jetpack should be submitted to Automattic (https://hackerone.com/automattic) instead.\nCampTix, CampTix Network Tools, P2 New Post Categories, Tagregator, and SupportFlow should be submitted to WordPress (https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/) instead, because they're Meta team (https://make.wordpress.org/meta/) projects.\nManage Tags Capabilities is not covered, since I don't have commit access to it.\nAny source repository on my Github account (https://github.com/iandunn?tab=repositories), except for the these:\nwp-filemaker-api-wrapper, compassionate-comments, camptix-shared-ticket-quantities, and scratch are not covered, because they're not finished and aren't actively being worked on.\nwordcamp-remote-css-test is not covered because it's only test data. \naudit-trail-extension isn't covered because it's old and I'm not using it anymore\nBounties\n| Severity | Award            |\n| -------- | ------------- |\n| High       | $100 - $400 |\n| Medium | $50                |\n| Low        | $0 - $25       |\nSeverity is based on CVSS 3 (https://www.first.org/cvss/calculator/3.0), but may be adjusted up or down at my discretion. Reports with very low severity may be closed as informative rather than accepted.\nTo qualify, reports must attach screenshots or other proof that you've actually performed the exploit. Reports must also have complete steps to reproduce. Please follow the standard guidelines (https://hackerone.com/guidelines), and I will too.\nScope Exclusions / Common Invalid Reports\nRare or low-severity edge cases: Like regular bugs, not all security bugs are worth fixing. Some edge cases may be closed as Informative. For example, CEMI attacks using standard trigger characters (like #151516) are welcome, but characters that only work in Excel, or only in old versions of software, etc are not accepted (see #124223).\nFront-end XSS from custom post types: WordPress intentionally allows Administrator and Editor accounts to enter unfiltered HTML (https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-some-users-allowed-to-post-unfiltered-html) into posts (including custom post types) and comments. Reports of XSS within wp-admin are valid, though.\nCSRF relying on nonce re-use: WordPress nonces aren't intended to be true nonces; they are meant to be reusable for 12-24 hours (https://codex.wordpress.org/WordPress_Nonces). That's not ideal, but it's an accepted practice in the WordPress ecosystem.\nPath Disclosure: That is really a server configuration issue (https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/#why-are-there-path-disclosures-when-directly-loading-certain-files), and any competent sysadmin will have display_errors disabled on production boxes. \nVersion Disclosure: That's usually just security through obscurity, and it is trivial to determine the version of open-source software through many methods (https://core.trac.wordpress.org/ticket/23394#comment:9).\nInvalid reports will be disclosed in order to help other researchers and programs learn from them (https://hackerone.com/reports/160488#activity-1220162).\n",
		"handle": "iandunn-projects",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/162/365be58b927d0cf1005256238e58691cfbcc8916_large.jpg?1398144914",
		"internet_bug_bounty": false
	},
	{
		"id": 41,
		"url": "/cloudflare",
		"name": "CloudFlare",
		"meta": {
			"bug_count": 91,
			"accepting_submissions": true
		},
		"about": "",
		"stripped_policy": "CloudFlare Vulnerability Disclosure Policy\nWe take security, trust, and transparency seriously. Cloudflare appreciates the work of security researchers and has developed a program to make it easier to report vulnerabilities to CloudFlare and to recognize you for your effort to make the Internet a better place. \nIf you believe you have found a security vulnerability that could impact Cloudflare or our users, we encourage you to let us know right away. We will investigate all legitimate reports and do our best to quickly fix the problem. We ask that you follow CloudFlare's Vulnerability Disclosure Policy and HackerOne's Disclosure Guidelines and make a good faith effort to avoid privacy violations, destruction of data and interruption or degradation of our service during your research.\nSubmitting high quality reports is highly encouraged. A high quality report is one that explains the vulnerability in detail, identifies its impact and most importantly which includes steps or a \"proof of concept\" that allows us to reproduce the issue.\nScope\nAny web properties owned by Cloudflare are in scope for the program.\n*.cloudflare.com\nCustomers of Cloudflare, or non Cloudflare sites behind our infrastructure are out of scope.\nSubmissions that are specifically detailing a \"best practice\" are out of scope unless they are exploitable in mass. \nExample 1: User enumeration through error messages. User enumeration is not an issue when it is possible to enumerate one user at a time with many failures, but a large issue when it is possible to enumerating users in a highly accurate way.\nExample 2: Missing SPF records or other email misconfiguration is not a reportable issue unless you can demonstrate that this missing record or misconfiguration allows you to successfully do something with significant impact.\nFinally, If you are a customer and have a password or account issue, please contact CloudFlare support. For abuse issues or law enforcement inquiries, please review our Abuse policy.\nEligibility and Disclosure\nIn order for your submission to be eligible:\nYou must agree to our Vulnerability Disclosure Policy.\nYou must be the first person to responsibly disclose an unknown issue. \nAll legitimate reports will be reviewed and assessed by CloudFlare's security team to determine if it is eligible. \nAs mentioned in our Privacy and Security Policy, CloudFlare's website and services are not intended for, or designed to attract, individuals under the age of 18. Due to the Children's Online Privacy Protection Act (COPPA), we cannot accept submissions from children under the age of 13. Reporters under the age of 18 will not be eligible to receive CloudFlare service rewards. We will find another way to recognize your effort.\nRewards\nFor each eligible vulnerability report, the reporter will receive:\nRecognition on our Hall of Fame.\nA limited edition CloudFlare bug hunter t-shirt. CloudFlare employees don't even have this shirt. It's only for you all. Wear it with pride: you're part of an exclusive group.\n12 months of CloudFlare's Pro or 1 month of Business service on us. \nMonetary compensation is not currently offered under this program.\nExclusions\nThe following conditions are out of scope for the vulnerability disclosure program. Any of the activities below will result in disqualification from the program permanently.\nPhysical attacks against CloudFlare employees, offices, and data centers.\nSocial engineering of CloudFlare employees, contractors, vendors, or service providers.\nKnowingly posting, transmitting, uploading, linking to, or sending any malware.\nPursuing vulnerabilities which send unsolicited bulk messages (spam) or unauthorized messages.\nAny vulnerability obtained through the compromise of a CloudFlare customer or employee accounts.  If you need to test a vulnerability, please create a free account.\nBeing an individual on, or residing in any country on, any U.S. sanctions lists.\n",
		"handle": "cloudflare",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/041/f5569c20eeb19be68569745033405cc231a8bf6c_large.png?1480719394",
		"internet_bug_bounty": false
	},
	{
		"id": 65,
		"url": "/mailru",
		"name": "Mail.Ru",
		"meta": {
			"bug_count": 1503,
			"accepting_submissions": true,
			"minimum_bounty": 100,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Leading Internet company in Europe",
		"stripped_policy": "Русскоязычное описание программы ниже.\nWe are announcing a month of double-pay for critical bugs in Mail.Ru e-mail service.\nUntil February, 1, we will pay double reward for the critical bugs.\nRemote code execution(RCE): $6000 (instead of usual $3000)\nLocal files access and manipulation(LFR, RFI, XXE): $4000 (instead of usual $2000)\nInjections(SQLi or equivalent): $4000 (instead of usual $2000)\nAlso we are planning to reward $6000 for a server-side technical vulnerabilities that can give remote access to victim’s arbitrary email messages.\nThis offer only covers new critical vulnerabilities in e-mail services submitted via HackerOne interface during promotion dates. The following domains are in the scope of this promotion:\nWeb:\ne.mail.ru\n*.e.mail.ru\ntouch.mail.ru\n*.touch.mail.ru\nm.mail.ru\n*.m.mail.ru\ntel.mail.ru\n*.tel.mail.ru\nlight.mail.ru\n*.light.mail.ru\nIMAP:\nimap.mail.ru\nPOP3:\npop.mail.ru\nSMTP:\nmxs.mail.ru\nsmtp.mail.ru\nOther rules are usual for our bug bounty program (below)\nProgram scope\nThe program's scope is limited to technical vulnerabilities in the company's web services or mobile apps.\nTo report problems accessing your account, please contact customers support (http://help.mail.ru/mail-support). \n \nWe are currently offering a reward for finding vulnerabilities in the company's critical  web services:\nMail.ru main portal page (https://mail.ru)\nmail.ru\nMail.ru Mail (https://e.mail.ru)\nHint: you can switch interface language (https://e.mail.ru/messages/inbox?lang=en_US)\nmail.ru\ne.mail.ru\n*.e.mail.ru\ntouch.mail.ru\n*.touch.mail.ru\nm.mail.ru\n*.m.mail.ru\ntel.mail.ru\n*.tel.mail.ru\nlight.mail.ru\n*.light.mail.ru\nPOP3/SMTP/IMAP except protocol weakness (e.g. sender spoofing or user enumeration in SMTP): \nsmtp.mail.ru\nmxs.mail.ru\npop.mail.ru\nimap.mail.ru\nMail.ru Cloud (https://cloud.mail.ru)\ncloud.mail.ru\n*.cloud.mail.ru\nMail.Ru Calendar (https://calendar.mail.ru)\ncalendar.mail.ru\n*.calendar.mail.ru\nMail.Ru for business (https://biz.mail.ru)\nbiz.mail.ru\n*.biz.mail.ru\nedu.mail.ru\n*.edu.mail.ru\nideas.mail.ru\n*.ideas.mail.ru\nMail.ru authorization center (https://auth.mail.ru)\nauth.mail.ru\n*.auth.mail.ru\no2.mail.ru\n*.o2.mail.ru\naccount.mail.ru\n*.account.mail.ru\nswa.mail.ru\n*.swa.mail.ru\nMail.Ru content services\nhealth.mail.ru\n*.health.mail.ru\nMail.Ru mobile apps for iOS and Android\nMail.Ru Mail for iOS (https://itunes.apple.com/en/app/pocta-mail.ru/id511310430)\nMail.Ru Mail for Android (https://play.google.com/store/apps/details?id=ru.mail.mailapp)\nMail.ru Cloud for iOS (https://itunes.apple.com/en/app/oblako-mail.ru/id696551382)\nMail.Ru Cloud for Android (https://play.google.com/store/apps/details?id=ru.mail.cloud)\nMail.Ru Calendar for Android (https://play.google.com/store/apps/details?id=ru.mail.calendar)\nКод Доступа Mail.Ru for Android (https://play.google.com/store/apps/details?id=ru.mail.auth.totp)\nКод Доступа Mail.Ru for iOS (https://itunes.apple.com/us/app/id1158940459)\nVulnerabilities are only accepted for Android 4.4 and later and iOS 8.0 and later.\nMy.com's MyMail applications and serverside\nMyMail for iOS (https://itunes.apple.com/us/app/mymail-email-for-hotmail-gmail/id722120997?mt=8)\nMyMail for Android (https://play.google.com/store/apps/details?id=com.my.mail\u0026amp;hl=en)\nMyMail mail server backends\nBugs common for both Mail.Ru and MyMail application / serverside are usually accepted as a single bug.\nDifferent My.Com's applications and web services are outside of bug bounty scope\nIn time, we will add more and more of the company's projects to our bug bounty program.\nYou can also participate in the separate bug bounty program's for\nVKontakte - vk.com - https://hackerone.com/vkcom (https://hackerone.com/vkcom)\nOdnoklassniki - ok.ru - https://hackerone.com/ok (https://hackerone.com/ok)\nlove.mail.ru (http://love.mail.ru/) is developed and supported by Wamba company and falls under Wamba Bug Bounty Program (http://corp.wamba.com/en/developer/security/)\nWhat is not within the scope of the program?\nIf you find a vulnerability that does not concern one of the projects listed above, we will be happy to investigate it and thank you for reporting it to us, you will be listed in our Hall of Fame. In this case, a reward is granted on a case by case basis for most critical vulnerabilities only.\n \nWe do not accept/review reports with:\n- Vulnerability scanners and another automated tools reports\n- Reports based on product/protocol version without demonstration of real vulnerability presence\n- Reports of missed protection mechanism / best current practice (e.g. no CSRF token, framing/clickjacking protection) without demonstration of real security impact for user or system\n- Reports regarding published and non-publised SPF and DMARC policies\n- Logout CSRF\n- Vulnerabilities of partner products or services if Mail.Ru users / accounts are not affected directly\n- Missed SSL or another BCP for products behind the scope\n- Security of rooted, jailbreaked or otherwise modified devices and applications\n- Ability to reverse-engineer an application, lack of binary protection\n- Open redirects on dedicated redirectors (r.mail.ru, click.mail.ru and alike)\n- Same site scripting and similar attacks with questionable impact\n- Denial of Service vulnerabilities\nWe will not pay a reward (and we will be really upset) if we detect:\n- Physical tampering with Mail.Ru Group's data centers or offices\n- Social engineering directed at the company's employees\n- Breaking into the company's infrastructure and using the information obtained to report vulnerabilities\n \nPlease use your own accounts to conduct your research. Do not try to gain access to others' accounts or any confidential information.\nHow do I submit a bug report?\nA bug report must give a detailed description of the discovered vulnerability and  brief steps to reproduce it, or a working proof-of-concept. \n \nIf you do not describe the vulnerability in sufficient detail, the discovery process is significantly prolonged  and that doesn't help anybody. It's also very desirable if researcher can explain how exactly he or she found a given vulnerability. \nWe are primarily interested in the following types of vulnerabilities:\n- Cross-Site Scripting\n- SQL Injection\n- Remote Code Execution\n- Cross-Site Request Forgery\n- Directory Traversal\nAnd also, we interested in:\n- Information Disclosure\n- Content Spoofing\n- Clickjacking\nVulnerabilities of this types, will be qualified for reward only if they have high severity, and allow access to user account.\nOf course, you can report any other types of vulnerabilities. We'll be sure to investigate and find a way to thank you.\nHow are bug reports examined?\nReports about vulnerabilities are examined by our security analysts.  Our analysis is always based on worst case exploitation of the vulnerability, as is the reward we pay.  \nReports are reviewed within 15 days (this is a maximum period - we'll probably respond sooner).\nIf you prefer to remain anonymous, we recommend using an alias when submitting bug reports.\nReward payment and amounts\nWe will pay you a reward if you are the first person to report a given vulnerability.  \nAdditionally,  at least 3 months must pass from when you report the vulnerability before you publish details of the vulnerability. We ask this of you so that we have sufficient time to respond to you and fix the vulnerability.\n \nA message will appear in your bug report, indicating that the vulnerability you reported has been confirmed and a reward has been granted. We may also ask you clarifying questions there or request additional information. Please keep track of your ticket.\n \nMinimum reward for a vulnerability report: $100. The maximum reward is limited only by the criticality \nof the vulnerability. Typical rewards for critical vulnerabilities:\nFor auth.mail.ru\nRemote code execution(RCE): $10000\nLocal files access and manipulation(LFR, RFI, XXE): $5000 \nInjections(SQLi or equivalent): $5000\nCross-Site Scripting(XSS): $500 (except self-XSS)\nCross-Site Requests Forgery(СSRF, Flash crossdomain requests): $150-500\nFor projects in scope\nRemote code execution(RCE): $3000\nLocal files access and manipulation(LFR, RFI, XXE): $2000 \nInjections(SQLi or equivalent): $2000\nCross-Site Scripting(XSS) on e-mail reading via message content: $1000\nCross-Site Scripting(XSS): $500 (except self-XSS)\nCross-Site Request Forgery(СSRF, Flash crossdomain requests): $150-500\n \nPayments are made through HackerOne (https://hackerone.com/faq#bounties-how-do-i-get-paid).\nVulnerability disclosure\nVulnerability must be disclosured only with accordance with HackerOne disclosure policy.\nRequest for vulnerability disclosure must be filed via HackerOne report interface.\nNo vulnerability disclosure, including partial is allowed before vulnerability is disclosured on HackerOne.\nIf any sensitive information including (but not limited to) infrastructure and implementation details, internal documentation procedures and interfaces, source code, user and emplyees data acidently obtained during vulnerability research or demonstration must not be disclosured. Intentional access to this information is strongly prohibited.\nРамки программы\nРамки нашей программы ограничены техническими уязвимостями веб-сервисов или мобильных приложений компании. Для того чтобы сообщить о проблемах доступа к аккаунту следует обратиться в нашу службу поддержки (http://help.mail.ru/mail-support).\nНа данный момент мы выплачиваем награду за обнаружение уязвимостей на критичных и основополагающих веб-сервисах компании:\nГлавная страница Mail.ru (https://mail.ru)\nmail.ru\nПочта Mail.ru (https://e.mail.ru)\ne.mail.ru\n*.e.mail.ru\ntouch.mail.ru\n*.touch.mail.ru\nm.mail.ru\n*.m.mail.ru\ntel.mail.ru\n*.tel.mail.ru\nlight.mail.ru\n*.light.mail.ru\nPOP3/SMTP/IMAP серверы кроме ошибок уровня протоколов (например возможности подмены адреса отправителя или проверки существования пользователя в SMTP):\nsmtp.mail.ru\nmxs.mail.ru\npop.mail.ru\nimap.mail.ru.\nОблако Mail.ru (https://cloud.mail.ru)\ncloud.mail.ru\n*.cloud.mail.ru\nКалендарь Mail.Ru (https://calendar.mail.ru)\ncalendar.mail.ru\n*.calendar.mail.ru\nMail.Ru для бизнеса (https://biz.mail.ru)\nbiz.mail.ru\n*.biz.mail.ru\nedu.mail.ru\n*.edu.mail.ru\nideas.mail.ru\n*.ideas.mail.ru\nАвторизационный центр Mail.ru (https://auth.mail.ru)\nauth.mail.ru\n*.auth.mail.ru\no2.mail.ru\n*.o2.mail.ru\naccount.mail.ru\n*.account.mail.ru\nswa.mail.ru\n*.swa.mail.ru\nКонтентные сервисы Mail.Ru\nhealth.mail.ru\n*.health.mail.ru\nА так-же  в мобильных приложениях Mail.Ru для iOS и Android, которые так или иначе работают с личной информацией пользователей:\nПочта Mail.Ru для iOS (https://itunes.apple.com/ru/app/pocta-mail.ru/id511310430)\nПочта Mail.Ru для Android (https://play.google.com/store/apps/details?id=ru.mail.mailapp)\nОблако Mail.ru для iOS (https://itunes.apple.com/ru/app/oblako-mail.ru/id696551382)\nОблако Mail.Ru для Android (https://play.google.com/store/apps/details?id=ru.mail.cloud)\nКалендарь Mail.Ru для Android (https://play.google.com/store/apps/details?id=ru.mail.calendar)\nКод Доступа Mail.Ru для Android (https://play.google.com/store/apps/details?id=ru.mail.auth.totp)\nКод Доступа Mail.Ru для iOS (https://itunes.apple.com/ru/app/id1158940459)\nПринимаются только уязвимости на актуальных версиях операционных систем (Android от 4.4 и выше, iOS 8.0 и выше)\nПочтовые приложения MyMail и бекэнд почты MyMail\nMyMail for iOS (https://itunes.apple.com/ru/app/mymail-email-for-hotmail-gmail/id722120997?mt=8)\nMyMail for Android (https://play.google.com/store/apps/details?id=com.my.mail\u0026amp;hl=ru)\nСерверная часть почты My.Com\nОшибки присутствующие одновременно в приложениях/сервернйо части Mail.Ru и MyMail как правило рассматриваются как одна ошибка.\nОстальные приложения my.com и Web-сервисы в настоящее время не входят в программу Bug Bounty.\nС течением времени, мы будем добавлять всё новые и новые проекты компании в рамки программы вознаграждения за уязвимости. \nТакже, вы можете участвовать в отдельных BugBounty программах\nВконтакте https://hackerone.com/vkcom (https://hackerone.com/vkcom)\nОдноклассники https://hackerone.com/ok (https://hackerone.com/ok)\nСервис love.mail.ru (http://love.mail.ru/) администрируется компанией Wamba и попадает под действие Wamba Bug Bounty Program (http://corp.wamba.com/ru/developer/security/)\nЧто не входит в рамки программы?\nЕсли вы нашли уязвимость, которая не относится к вышеперечисленным проектам, мы в любом случае будем рады рассмотреть её и поблагодарить вас за её сообщение и занесем в зал славы. Денежная награда в этом случае, присуждается в индивидуальном порядке только в случае особо критичных уязвимостей.\nНе рассматриваются и не принимаются как уязвимости:\n- Сообщения от сканеров безопасности и других средств автоматического сканирования\n- Сообщения об уязвимостях, основанные на версиях продукта / протокола (без демонстрации реального существования уязвимости)\n- Сообщения об отсутствии механизма защиты или несоответствия рекомендациям (например отсутствие CSRF токена, возможности framing'а, clickjacking'а) без указания на реально существующие негативные последствия\n- Logout CSRF\n- Сообщения касающиеся опубликованных и неопубликованных политик SPF / DMARC\n- Уязвимости в партнерских сервисах и продуктах, если они не затрагивают непосредственность безопасность сервисов Mail.Ru.\n- Отсутствие SSL на проектах / продуктах вне скопа программы\n- Безопасность устройств и программ подвергшихся модификации, джейлбрейку, рутированию и т.п.\n- Возможность реверс-инженерии или отсутствии обфускации кода\n- Открытые редиректы на редиректорах (r.mail.ru, click.mail.ru и подобные)\n- Same site scripting и аналогичные атаки с сомнительным импактом\n- уязвимости Denial of Service\nМы не выплачиваем вознаграждение и очень огорчаемся когда наблюдаем случаи: \n - Организации физического взлома датацентов или офисов Mail.Ru Group\n - Социальной инженерии направленной против сотрудников компании\n - Взлома инфраструктуры компании, и использование полученной информации для сообщения об уязвимостях\nПроводя исследования, пожалуйста используйте для этого свои собственные аккаунты. Не пытайтесь получить доступ к чужим аккаунтам или какой-либо конфиденциальной информации.\nКак репортить?\nВ багрепорте нужно дать подробное описание найденной уязвимости и кратко, но понятно указать, какие шаги приводят к тому, чтобы с нею столкнуться, или привести рабочее подтверждение своей концепции. \nЕсли вы не опишете уязвимость во всех необходимых подробностях, процесс раскрытия сильно затянется, и никому от этого не будет лучше. Также, очень желательно, чтобы исследователь мог объяснить, каким именно образом он нашёл ту или иную уязвимость.\nНам в первую очередь интересны уязвимости следующих видов:\n- Cross-Site Scripting\n- SQL Injection\n- Remote Code Execution\n- Cross-Site Request Forgery\n- Directory Traversal\nВо вторую очередь:\n- Information Disclosure\n- Content Spoofing\n- Clickjacking\nУязвимости этих типов, награждаются  только в случае исключительно высокого риска для пользователей, и возможности получения доступа к аккаунту.\nНо, безусловно, вы можете сообщать нам о любых других типах уязвимостей, и мы всегда найдём время рассмотреть их и способ отблагодарить вас. \nКак рассматриваются багрепорты?\nСообщения об уязвимостях рассматриваются нашими аналитиками информационной безопасности. В ходе оценки, мы всегда представляем себе наиболее худший сценарий эксплуатации уязвимости, и выплачиваем награду исходя из этого. \nРассматриваются сообщения в течение 15 дней(это максимальный срок, скорее всего мы ответим быстрее).\nЕсли вы предпочитаете сохранять свое имя в тайне, рекомендуем вам пользоваться  псевдонимом при подаче баг-репортов.\nВыплата и размеры наград\nМы выплачиваем награду в том случае, если вы первый, кто сообщил нам о данной уязвимости.\nТакже, с момента сообщения вами уязвимости должно пройти не менее 3 месяцев, прежде чем вы сможете опубликовать её детали. Мы просим вас об этом, потому что нам нужно иметь достаточное количество времени, чтобы ответить вам и исправить уязвимость.\nСообщение о том, что указанная вами уязвимость подтвердилась, а также информация о присуждении вам награды будут появляться в вашем багрепорте. Там же мы можем задать вам уточняющие вопросы или запросить дополнительную информацию, пожалуйста, следите за своим \"тикетом\". \nМинимальная награда за сообщение об уязвимости: $100, максимальный размер награды ограничен лишь критичностью уязвимости. Примерные размеры наград за критичные уязвимости:\nДля auth.mail.ru\nУдалённое выполнение  кода(RCE): $10000\nМанипуляции с файлами, чтение/запись(LFR, RFI, XXE): $5000 \nИнъекции(SQLi или эквивалент): $5000\nМежсайтовый скриптинг(XSS): $500 (кроме self-XSS)\nМежсайтовая подделка запросов(СSRF, Flash crossdomain requests): $150-500\nДля проектов из scope\nУдалённое выполнение  кода(RCE): $3000\nМанипуляции с файлами, чтение/запись(LFR, RFI, XXE): $2000 \nИнъекции(SQLi или эквивалент): $2000\nМежсайтовый скриптинг(XSS) на чтении письма через его содержимое: $1000\nМежсайтовый скриптинг(XSS): $500 (кроме self-XSS)\nМежсайтовая подделка запросов(СSRF, Flash crossdomain requests): $150-500(в зависимости от критичности)\nВыплаты производятся через систему проекта HackerOne (https://hackerone.com/faq#bounties-how-do-i-get-paid).\nРаскрытие уязвимости\nРаскрытие информации об уязвимости должно производится в соответствии с правилами HackerOne.\nЗапрос на раскрытие должен производиться через интерфейс репортов на HackerOne.\nДо раскрытия информации на HackerOne не допускается раскрытия информации на любых других ресурсах, в т.ч. частичное.\nЛюбая сенситивная информация, включая особенности инфраструктуры, реализации, внутренняя документация, интерфейсы и процедуры, исходный код, приватные данные пользователей и сотрудников; доступ к которой случайно был получен при демонстрации уязвимости не должна раскрываться. Намеренный доступ к указанной информации строго запрещен.\n",
		"handle": "mailru",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/065/8ab710d53394f3f51311e1001a064c887ea7ca67_large.png?1397207912",
		"internet_bug_bounty": false
	},
	{
		"id": 111,
		"url": "/automattic",
		"name": "Automattic",
		"meta": {
			"bug_count": 448,
			"accepting_submissions": true
		},
		"about": "WordPress.com, VaultPress, Akismet, Gravatar, Cloudup, WooCommerce, Polldaddy and more!",
		"stripped_policy": "Automattic runs WordPress.com (https://wordpress.com/), Jetpack (https://jetpack.com/), VaultPress (https://vaultpress.com/), Akismet (https://akismet.com/), Gravatar (https://gravatar.com/), Cloudup (https://cloudup.com/), WooCommerce (http://www.woothemes.com/woocommerce/), and more. Find a complete list of projects on our website https://automattic.com/.\nWe also welcome reports for the open source projects WordPress (http://wordpress.org), BuddyPress (http://buddypress.org), and bbPress (http://bbpress.org).\nEligibility and Responsible Disclosure\nYou are responsible for complying with all applicable laws and must only ever use or otherwise access your own test accounts when researching vulnerabilities in any of our products or services. Access to, or modification of user data is explicitly prohibited without prior consent from the account owner.\nAny public disclosure of issues prior to resolution may result in disqualification from the program. Individuals who we are legally prohibited from paying, such as those residing in a country on a U.S. sanctions list, are ineligible for rewards.\nRewards\nAutomattic may, at its own discretion, provide a bounty for qualifying vulnerabilities. Bounties will be awarded to the first reporter of a vulnerability only. Amounts may vary depending upon the severity of the issue and quality of the report. \nQualifying Vulnerabilities\nAny reproducible vulnerability that affects the security of our users is likely to be in scope for the program. Common examples include:\nCross Site Scripting (XSS)\nCross Site Request Forgery (CSRF)\nServer Side Request Forgery (SSRF)\nRemote Code Execution (RCE)\nSQL Injection (SQLi)\nWe are generally not interested in DoS vulnerabilities that are perceived by a lack of rate-limiting or captcha. As a web-scale service, our threshold for rate limiting is higher than you would probably expect. Of course, if you think you have found an exception to this rule, please let us know.\nFine Print\nYou are expected to comply with all applicable laws in connection with your participation in this program and you are responsible for the payment of any taxes associated with rewards received. \n",
		"handle": "automattic",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/111/17b0bea1201bbd01904f6718cf71505ac1e93101_large.png?1396031864",
		"internet_bug_bounty": false
	},
	{
		"id": 140,
		"url": "/irccloud",
		"name": "IRCCloud",
		"meta": {
			"bug_count": 148,
			"accepting_submissions": true,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Group chat for teams, friends, and communities. IRCCloud is an IRC client with a future. Stay connected, chat from anywhere, and never miss a message.",
		"stripped_policy": "Reporting Security Vulnerabilities\nThis page is intended for security researchers. To find out more about IRCCloud's security, please visit our privacy information (https://www.irccloud.com/privacy) page.\nIf you believe you have found a security vulnerability on IRCCloud, we encourage you to let us know right away. We will investigate all legitimate reports and do our best to quickly fix the problem.\nPlease submit your report here and our security team will respond as soon as possible.\nResponsible Disclosure Policy\nIf you give us a reasonable time to respond to your report before making any information public and make a good faith effort to avoid privacy violations, destruction of data and interruption or degradation of our service during your research, we will not bring any lawsuit against you or ask law enforcement to investigate you.\nAutomated Testing\nAutomated testing against IRCCloud is not allowed. If you use automated testing, your account will be banned and we will not award any bounties.\nBug Bounty Info\nTo show our appreciation for security researchers, we offer a monetary bounty for certain qualifying security bugs. Here is how it works:\nEligibility\nTo qualify for a bounty, you must:\nFollow the HackerOne Disclosure Guidelines (https://hackerone.com/guidelines)\nAdhere to our Responsible Disclosure Policy (above)\nBe the first person to responsibly disclose the bug\nReport a bug applicable to our main web application on www.irccloud.com, and our open-source Android (https://github.com/irccloud/android) and iOS (https://github.com/irccloud/ios) apps.\nReport a bug that could compromise the integrity of our user data, circumvent the privacy protections of our user data, or enable access to a system within our infrastructure, such as:\nCross-Site Scripting (XSS)\nCross-Site Request Forgery (CSRF/XSRF)\nBroken Authentication\nCircumvention of our Privacy policy\nRemote Code Execution\nPrivilege Escalation\nProvisioning Errors\nPlease use a test account instead of a real account when investigating bugs. When you are unable to reproduce a bug with a test account, it is acceptable to use a real account, except for automated testing. Do not interact with other IRC users or channels without the consent of their owners.\nReside in a country not under any current U.S. Sanctions (e.g., North Korea, Libya, Cuba, etc.)\nWe will assess each bug to determine if it qualifies.\nRewards\nOur minimum reward is $50 USD for minor issues, while we expect to reward $500+ USD for major vulnerabilities\nThere is no maximum reward: each bug is awarded a bounty based on its severity and creativity\nOnly 1 bounty per security bug will be awarded\nExclusions\nThe following bugs are generally not eligible for a bounty (and we do not recommend testing for these):\nDenial of Service Vulnerabilities\nSpam or Social Engineering techniques\n\"Best practice\", e.g. missing CSP headers.\nReporting Bugs\nPlease only report one bug per HackerOne issue. If you submit a bug report containing a video, you must also clearly describe the issue in the text of the report.\nPlease note that we are a small company with no dedicated security engineers. High-priority issues will be dealt with swiftly, but lower-priority issues may take some time to be fixed. We won't issue any rewards until fixes are deployed.\n",
		"handle": "irccloud",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/140/b862d778a192b5ad7bb569bad0e83f96d54da3ba_large.png?1397053347",
		"internet_bug_bounty": false
	},
	{
		"id": 134,
		"url": "/khanacademy",
		"name": "Khan Academy",
		"meta": {
			"bug_count": 87,
			"accepting_submissions": true
		},
		"about": "Start learning now. Completely free, forever.",
		"stripped_policy": "At Khan Academy, we're a small, non-profit team trying to give a free, world-class education to anyone, anywhere.\nWe're committed to maintaining a safe website where student data is appropriately protected. If you've discovered a security issue in Khan Academy, we'd love to work with you. Please let us know about it and we'll fix the issue as soon as we can.\nScope\nWe're interested in technical vulnerabilities in any *.khanacademy.org website or in our official mobile apps (iOS (https://itunes.apple.com/us/app/khan-academy/id469863705?mt=8), Windows 8 (http://apps.microsoft.com/windows/en-us/app/khan-academy/d23cc2b2-c105-4db3-9946-e44bacc56f7b))\nOur API (https://github.com/Khan/khan-api/wiki/Khan-Academy-API) includes an OAuth flow (https://github.com/Khan/khan-api/wiki/Khan-Academy-API-Authentication) for authorizing access to a Khan Academy account\nOur computer programming section (https://www.khanacademy.org/computing/cs) intentionally allows the execution of user-provided JavaScript, but execution is sandboxed to an iframe on a different domain (kasandbox.org); running arbitrary JS within the iframe is not considered a vulnerability unless it leads to another attack\nParts of our website and infrastructure are open source on GitHub (https://github.com/Khan)\nIf you need a Khan Academy account (or two) to test your vulnerability, create a new one; don't use another user's account\nNotes \u0026amp; Exclusions\nSome parts of our site are hosted by third parties on subdomains (including shop (http://shop.khanacademy.org/), life (http://life.khanacademy.org/), crowdin (http://crowdin.khanacademy.org/), emails (http://emails.khanacademy.org/)); we're less interested in these vulnerabilities unless they lead to a vulnerability in the main site\nSeveral of our internal services, including our mobile build server (https://mobile-ci.khanacademy.org/), and sandcastle (http://sandcastle.kasandbox.org/) deliberately have some public parts.  This is deliberate and we don't consider it a vulnerability unless you can use it to compromise the main site.\nWe generally only consider spoofing an email that appears to be sent from khanacademy.org as an issue if you can point to specific settings (e.g. SPF records) that aren't configured correctly to prevent it; other reports are generally too client-dependent and difficult to reproduce to be actionable.\nIssues that only apply to browsers we do not support (https://khanacademy.zendesk.com/hc/en-us/articles/204795660-Supported-browsers) are generally lower-priority although we'll still accept more serious issues.\nTo be considered a valid vulnerability, you must be able to demonstrate a way to negatively impact other users. Methods of changing your own experience - including granting yourself energy points - are not considered security issues.\nNon-security-related issues can be reported to our public bug tracker, Zendesk: https://khanacademy.zendesk.com.\nThanks\nWe believe in recognizing the work of others. If your work helps us improve the security of our website, we'd be happy to acknowledge your work in our Hall of Fame (https://hackerone.com/khanacademy/thanks) and to make you the proud owner of a Friendly Hacker (https://www.khanacademy.org/badges/friendly-hacker) badge on Khan Academy.\n",
		"handle": "khanacademy",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/134/d0df7aba23811f89f0abeebc2a5ca3ba79b51883_large.png?1396826077",
		"internet_bug_bounty": false
	},
	{
		"id": 104,
		"url": "/coinbase",
		"name": "Coinbase",
		"meta": {
			"bug_count": 281,
			"accepting_submissions": true,
			"minimum_bounty": 100,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Bitcoin, safe and easy.",
		"stripped_policy": "Coinbase Bug Bounty Program\nCoinbase recognizes the importance of security researchers in helping keep our community safe. We encourage responsible disclosure of security vulnerabilities via our bug bounty program described on this page.\nNote: This program is for the disclosure of software security vulnerabilities only. If you believe your Coinbase account has been compromised, change your password and contact support@coinbase.com immediately.\nResponsible Disclosure\nResponsible disclosure includes:\nProviding us a reasonable amount of time to fix the issue before publishing it elsewhere.\nMaking a good faith effort to not leak or destroy any Coinbase user data.\nNot defrauding Coinbase users or Coinbase itself in the process of discovery.\nIn order to encourage responsible disclosure, we promise not to bring legal action against researchers who point out a problem provided they do their best to follow the above guidelines.\nSocial Engineering\nYou are not allowed to conduct social engineering attacks against our support team. This will most likely result in your account being closed and no bounty will be awarded.\nRewards\nThe minimum payout is $100 USD and an entry in our hall of fame (https://hackerone.com/coinbase/thanks) for reporting a new security vulnerability which results in a code or configuration change on our part. There is no maximum reward, and we may award higher amounts based on the severity or creativity of the vulnerability found.\nResearchers are more likely to earn a larger reward by demonstrating how a vulnerability can be exploited to maximum effect.\nWe use the following table as a guideline for determining reward amounts:\n| Vulnerability | Reward |\n|:------------- | -----:|\n| Remote Code Execution | $10,000 |\n| Significant manipulation of account balance | $5,000 |\n| XSS/CSRF/Clickjacking affecting sensitive actions [1] |  $5,000 |\n| Theft of privileged information [2] | $3,000 |\n| Partial authentication bypass | $1,000 |\n| Other XSS (excluding Self-XSS (http://en.wikipedia.org/wiki/Self-XSS)) | $1,000 |\n| Other vulnerability with clear potential for financial or data loss | $1,000 |\n| Other CSRF (excluding logout CSRF) | $250 |\n| Other best practice or defense in depth | $100 |\n|||\n[1] Sensitive actions include: depositing, trading, or sending money; OAuth or API Key actions\n[2] Privileged information includes: passwords, API keys, bank account numbers, social security numbers or equivalent\nEligibility\nAll services provided by Coinbase are eligible for our bug bounty program, including the Coinbase Wallet, API, Merchant Tools, and Exchange.\nIn general, anything which has the potential for financial loss or data breach is of sufficient severity, including:\nXSS\nCSRF\nAuthentication bypass or privilege escalation\nClick jacking\nRemote code execution\nObtaining user information\nAccounting errors\nIn general, the following would not meet the threshold for severity:\nLack of password length restrictions\nMerely showing that a page can be iFramed without finding a link on the page to be click-jacked.\nSelf-XSS (http://en.wikipedia.org/wiki/Self-XSS)\nDenial of service\nSpamming\nVulnerabilities in third party applications which make use of the Coinbase API\nVulnerabilities which involve privileged access (e.g. rooting a phone) to a victim's device(s)\nLogout CSRF\nUser existence/enumeration vulnerabilities\nPassword complexity requirements\nReports from automated tools or scans (without accompanying demonstration of exploitability)\nSocial engineering attacks against Coinbase employees or contractors\nText-only injection in error pages\nAutomatic hyperlink construction by 3rd party email providers\nUsing email mutations (+, ., etc) to create multiple accounts for a single email\nThe following domains are hosted by third parties, and are not currently eligible for our bug bounty program (unless they lead to a vulnerability on the main website):\nblockr.io\nblog.coinbase.com\ncommunity.coinbase.com\nstatus.coinbase.com\nsupport.coinbase.com\nsupport.gdax.com\nfiletransfer.coinbase.com\nAny other service not directly hosted or controlled by Coinbase.\nCoinbase will determine at its discretion whether a vulnerability is eligible for a reward and the amount of the award.\nBy submitting a bug, you agree to be bound by the above rules.\n",
		"handle": "coinbase",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/104/244b66e2eef34b1f6111efeaa1a2c3f3b354407a_large.png?1395368444",
		"internet_bug_bounty": false
	},
	{
		"id": 60,
		"url": "/concrete5",
		"name": "concrete5",
		"meta": {
			"bug_count": 170,
			"accepting_submissions": true
		},
		"about": "A simple and powerful content management system.",
		"stripped_policy": "concrete5 is a powerful CMS built around the idea of in-context editing. It's a mature product with lots of IO, so there's lots of opportunities to find less than perfect code. ;) \nRead This\nIMPORTANT: There are three types of issues we track here: Core CMS issues, concrete5.org community site issues, and add-on/theme issues from the marketplace at concrete5.org. We can not promise swag or absolute resolution on a fixed timeline for every issue, but we're eager to hear about what you've found regardless. \nInstall a local copy of concrete5. This will let you test concrete5 without disrupting other users.\nIMPORTANT: SERVER CONFIGURATION ISSUES DO NOT QUALIFY. Do not report configuration issues with concrete5.org, portlandlabs.com, etc. For example: software versions, SPF headers, etc. These are outside of program scope. The goal of this program is to find vulnerabilities in the concrete5 CMS software itself.\nFor instructions on installing a local copy of concrete5, see the Installation Guide (http://www.concrete5.org/documentation/developers/5.7/installation).\nWe receive many reports from researchers who do not read these rules. To prove that you've read and understood these rules, please include the word \"crayons\" somewhere in your report. If you do not, your report will be closed as invalid automatically.\nThese last 4 awesome rules have been copied almost verbatim from Phabricator (https:////hackerone.com/phabricator), if you have extra time to give, that's a great place to give it!\nRequirements\nTest on your copy. We're open source, so grab a copy from our site (http://www.concrete5.org/developers/downloads/) and install it locally (http://www.concrete5.org/documentation/developers/5.7/installation). Beating on our trial servers or concrete5.org will not be well received.\nBe clear. We totally get that you're not paid to do this. Here's a coincidence, neither are we! There's no huge corporate benefactor behind concrete5 today, so we're not in a position to \nponder your terse report that's steeped in insider snark to guess at what you meant. You spent the time finding the issue, muster an extra 2 minutes to spell out what you're able to do with it \nso us over allocated curmudgeons understand the severity of our screw up. ;)\nBe responsible. We're here because we want to know vulnerabilities before the world does so we have a chance to provide a solution in a reasonable timeframe. We assume you're here for the \nsame. Report issues directly to us here.\nAddon's and Themes for concrete5 can be reported here, we will make every effort to forward information to the the author of the code. In cases where there is an 'open door' security issue we may get involved in issuing a fix ourselves. Please keep in mind that there are thousands of add-ons and themes for concrete5 that we didn't write, we will do the best we can to keep communication open and release schedules of your vulnerability reports clear.\n3rd Party Stuff. We use jQuery, ADODB, TinyMCE, some Zend Libraries, etc.. If you find an issue entirely within one of our included solutions, we're of course interested, but likely only if \nthey lead to severe/critical issues (below)\nLevels of Severity\nOpen Door - A clear method where someone can immediately gain any type of unintended administrative access through a bug in the system. This would put a website at risk from an external attacker or a disgruntled editor with limited permissions. It is a clear documented attack that always grants access to someone who should not have it. This type of exploit would be considered a top priority and would likely force an immediate point release of the core to resolve. \nExternal Attack Vector - A bug that an external attacker might use in conjunction with other techniques to gain access or get data. No administrative access is required to exploit the bug. The bug does not provide access on its own. It would have to be part of a larger attack, often involving some social engineering. These are considered a high priority and are typically patched immediately by the core team in github and launched in the next version of the core. \nInternal Attack Vector - A bug that requires someone already have some type of administrative access to the CMS. This might just change the experience of the CMS, or be part of a more complicated attack that might hypothetically gain more access than they should have. These are considered important to clean up over time. \nResponse\nWe will try to respond to most reports within 48 hours.\nWe will fix open door security issues within 48 hours of confirming them, all other issues will be fixed within a reasonable timeline as determined after triage.\nWe've got some limited swag and lots of honor for those who submit issues related to the core software, but no cash. Generally we're sending out stickers, but occasionally a truly stellar report gets a t-shirt.\n",
		"handle": "concrete5",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/060/bb4b77176b2fdfac508b54a79f8cd6fbadee3a19_large.jpg?1393279055",
		"internet_bug_bounty": false
	},
	{
		"id": 69,
		"url": "/slack",
		"name": "Slack",
		"meta": {
			"bug_count": 549,
			"accepting_submissions": true,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "All your team communication in one place, instantly searchable, and available wherever you go.",
		"stripped_policy": "NEW: Program Update and Guide (https://slack-files.com/T2C8V3QM6-F2C8VAE9L-57d0d1dd01)\nSlack is committed to treating our customers’ data with the utmost care. As part of this, we encourage security researchers to put our security to the test - and we offer a variety of rewards for doing so. As of June 2016, we have paid out over $150,000 to researchers, and we look forward to continuing to work with the community as we add new features and services.\nThis page is intended for security researchers. For general information about security at Slack, please see our main website (https://slack.com/security).\nLove hacking on Slack? We’re hiring security engineers (http://grnh.se/kr6ptl)!\nProgram Rules\nAutomated testing is not permitted.\nFollow HackerOne’s Disclosure Guidelines (https://hackerone.com/guidelines).\nTest only with your own team(s) when investigating bugs, and do not interact with other accounts without the consent of their owners.\nYou must be the first person to report the issue to us. We will review duplicate bugs to see if they provide additional information, but otherwise only reward the first reporter.\nWe award bounties at time of fix, and will keep you posted as we work to resolve them.\nContacting our support team (feedback@slack.com) about the status of a HackerOne report will result in an immediate disqualification for a bounty for that report.\nBug Bounty Rewards\nThe following guidelines give you an idea of what we usually pay out for different classes of bugs. Low-quality reports may be rewarded below these tiers, so please make sure that there is enough information for us to be able to reproduce your issue.  Step-by-step instructions including how to reproduce your issue starting out by creating a fresh Slack account are preferred.  Screenshots and videos are also helpful, but please make sure to not make these public before submitting them to follow our program’s rules.  \nThere is no maximum reward - particularly creative or severe bugs will be rewarded accordingly.  Depending on the severity of the bug, and the quality of your report, we may pay a lower-tier bug out at a higher level.\nTier 4: Very Low Severity Bugs     $50 and up\nMixed content issues\n\"Tab-Nabbing\" or other rel=\"noopener\" bugs\nNo other types of issues at this level will be considered for bounty\nTier 3: Low Severity Bugs    $100 and up\nSelf-XSS (XSS requiring interaction other than browsing to exploit)\nServer misconfiguration or provisioning errors\nInformation leaks or disclosure (excluding customer data)\nAnd other low-severity issues\nTier 2: Medium Severity Bugs     $500 and up\nXSS that affects other teammates within a team\nCross-Site Request Forgery on Sensitive Actions or Functions (CSRF/XSRF)\nBroken Authentication affecting a single team\nPrivilege Escalation affecting a single team\nSSRF to an internal service, hosted by slack\nInformation leaks or disclosure (including customer data)\nAnd other medium-severity issues\nTier 1: High Severity Bugs    $1000 and up\nXSS that affects more than one team (cross-team exploitation)\nTier 0: Critical Severity Bugs  $1500 and up\nSQL Injection\nRemote Code Execution\nPrivilege Escalation affecting all teams\nBroken Authentication affecting all teams\nSSRF to an internal service, with extremely critical impact (e.g. immediate and direct security risk)\nAnd other critical-severity issues\nWhat’s In Scope\nslack.com\napi.slack.com\nstatus.slack.com\nTier-0 bugs only for the following:\nscreenhero.com (and subdomains that explicitly are run by Slack, and are required for the screenhero service to operate)\nslackatwork.com\nslack-redir.net\nslack-files.com\nslack-imgs.com\nspaces.pm\nCurrent versions of the official Slack applications for Windows, Mac, Linux, iOS, Android, and Windows Phone\nApps that are maintained by Slack itself (and not 3rd party applications).  To identify apps that are in scope for bug bounty, please go to the page for that app (for example, email (https://slack.com/apps/A0F81496D-email)) and ensure there is no link to \"Report this app\" under the icon for the application.\nTesting notes\nCSRF: we use a parameter named crumb for our CSRF tokens in our production application.  CSRF reports that include this parameter in the proof of concept will be marked as invalid.\nCookie Scope: the only sensitive cookies in the Slack product reside on .slack.com and not on other slack- domains. \nExclusions\nThe following bugs are unlikely to be eligible for a bounty:\n* Issues found through automated testing\n* \"Scanner output\" or scanner-generated reports\n* Publicly-released bugs in internet software within 3 days of their disclosure\n* \"Advisory\" or \"Informational\" reports that do not include any slack-specific testing or context\n* Vulnerabilities requiring physical access to the victim's unlocked device\n* Denial of Service attacks\n* Brute Force attacks\n* Spam or Social Engineering techniques, including:\n    * SPF and DKIM issues\n    * Content injection\n    * Hyperlink injection in emails\n    * IDN homograph attacks\n    * RTL Ambiguity\n* Content Spoofing\n* Issues relating to Password Policy\n* Full-Path Disclosure on any property\n* Version number information disclosure\n* Third-party applications on the Slack Application directory (identified by the existence of a \"Report this app\" link on the app's page).  Please report issues with these services to the creator of that specific application.\n* Clickjacking on pre-authenticated pages, or the non-existence of X-Frame-Options, or other non-exploitable clickjacking issues  (An exploitable clickjacking vulnerability requires a) a frame-able page that is b) used by an authenticated user and c) which has a state-changing action on it vulnerable to clickjacking/frame re-dressing)\n* CSRF-able actions that do not require authentication (or a session) to exploit\n* 3rd-party subdomains of screenhero.com that are not explicitly required for the product to function (e.g. feedback.screenhero.com is not in scope)\n* Reports related to the following security-related headers:\n    * Strict Transport Security (HSTS)\n    * XSS mitigation headers (X-Content-Type and X-XSS-Protection)\n    * X-Content-Type-Options\n    * Content Security Policy (CSP) settings (excluding nosniff in an exploitable scenario)\n* Bugs that do not represent any security risk - these should be reported to feedback@slack.com.\n* Issues with other domains or applications owned or related to Glitch or Tiny Speck\n* Security bugs in slackhq.com and blog.screenhero.com - these sites runs on Tumblr, so if you find vulnerabilities in the Tumblr service, please see Tumblr’s bounty program (https://www.tumblr.com/docs/en/bug_bounty) for reporting details\n* Security bugs in third-party applications or services built on the Slack API - please report them to the third party that built the application or service\n* Security bugs in software related to an acquisition for a period of 90 days following any public announcement\n",
		"handle": "slack",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/069/8341f17e29c683aba393ba97aaf9f89be8e9decc_large.png?1449082084",
		"internet_bug_bounty": false
	},
	{
		"id": 19,
		"url": "/yahoo",
		"name": "Yahoo!",
		"meta": {
			"bug_count": 3417,
			"accepting_submissions": true,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "Yahoo Bug Bounty Program Rules\nThe Yahoo Bug Bounty Program Rules have undergone a restructuring process as of January 4, 2016.\nAll reports submitted prior to this date will be considered under the previous rules. See our post on Tumblr (https://yahoo-security.tumblr.com/post/136619322000/taking-our-bug-bounty-program-to-the-next-level) for the official announcement.\nReported bugs will be assessed by our security team to determine if they qualify for a reward. Please report a potential security issue immediately. Yahoo will consider the impact to the company and our users and will calculate the reward accordingly. Bug submissions will be reviewed within 30 days.\nReporting\nVerifiable proof the vulnerability exists (screenshot/video/script) is required to receive an award\nFor more technically elaborate vulnerabilities, reproduction steps are required. If our security team cannot reproduce and verify an issue, a bounty cannot be awarded. When submitting a bug, please also keep in mind the following:\nUse test accounts so as not to inadvertently compromise the privacy of our users\nMinimize the mayhem. For instance, when testing for a command injection vulnerability, it is sufficient to show the output of the id or hostname commands. It is not necessary to cat /etc/passwd. When attempting to demonstrate root permissions with the following primitives in a vulnerable process please use the following commands:\nRead: cat /proc/1/maps\nWrite: touch /root/\nExecute: id\nA good bug report should include the following information at a minimum:\n+ List the URL and any affected parameters\n+ Describe the browser, OS, and/or app version\n+ Describe the perceived impact. How could the bug potentially be exploited?\nIn-Scope Domains and Properties\nThe scope of this program is limited to technical security vulnerabilities on Yahoo owned applications. For password and account access issues please work with our Customer Care team (https://help.yahoo.com/kb/helpcentral). \n- *.yahoo.com\n- *.flickr.com\n- All Yahoo and Flickr branded mobile apps\n- All Yahoo and Flickr branded client side applications\n- Brightroll\n- Flurry\n- Media Group One\n- Polyvore\n- Yahoo Small Business (aabaco and luminate domains)\nOut-of-Scope Domains and Properties\n*.yahoo.net\nYahoo 7 (au.yahoo.com/nz.yahoo.com)\nYahoo Japan (Contact: yird-contact@mail.yahoo.co.jp)\nTumblr (https://www.tumblr.com/docs/en/bug_bounty)\nOnwander\nRivals\nYahoo operated Wordpress blogs\nFindings not eligible for bounty\nVulnerabilities affecting users of outdated browsers or platforms\nIE \u0026lt; 9\nChrome \u0026lt; 40\nFirefox \u0026lt; 35\nSafari \u0026lt; 7\nOpera \u0026lt; 13\n\"Self\" XSS\nOpen redirects\nMissing cookie flags\nSSL/TLS best practices\nInformation disclosures\nMixed content warnings\nDenial of Service attacks\n\"HTTP Host Header\" XSS\nClickjacking/UI redressing\nMissing crumb parameters\nSoftware version disclosure\nAccount/e-mail enumeration\nReflected file download attacks\nIncomplete or missing SPF/DKIM\nPhysical or social engineering attacks\nResults of automated tools or scanners\nLogin/logout/unauthenticated/low-impact CSRF\nPresence of autocomplete attribute on web forms\nUsing unreported vulnerabilities to find other bugs\nQuery manipulation that exposes tables or info via YQL\nSelf-exploitation (i.e. password reset links or cookie reuse)\nIssues related to networking protocols or industry standards\nXSS in Flash files not developed by Yahoo, e.g. third-party ads\nUse of a known-vulnerable library (without proof of exploitability)\nDescriptive/verbose/unique error pages (without proof of exploitability)\nAny Yahoo-developed software that is End of Life or no longer supported\nAny non-Yahoo applications, unless it's a Yahoo modified or branded version\nMissing security-related HTTP headers which do not lead directly to a vulnerability\nInternal pivoting, scanning, exploiting, or exfiltrating data from internal Yahoo systems\n\nEligibility and Coordinated Disclosure\nYou will be eligible for a bounty only if you are the first person to disclose an unknown issue to Yahoo. The Yahoo security team and associated development teams have 30 days to respond to the report, and up to 90 days to implement a fix based on the severity of the report. Please allow for this process to fully complete before you publicly disclose the vulnerability. Note that posting details or conversations about this report before it has been approved for disclosure or posting details that reflect badly on this program and the Yahoo brand will result in forfeiture of any award and/or immediate removal from the program.\nRewards\nQualifying bugs will be rewarded based on severity, to be determined by the Yahoo security team. Rewards may range from Yahoo-branded swag to monetary rewards up to $15,000 USD. Awards are granted entirely at the discretion of Yahoo.\nAt Yahoo's discretion, providing more complete research, proof-of-concept code and detailed writeups may incur a bonus percentage on the bounty awarded. Conversely, Yahoo may pay less for vulnerabilities that require complex or over-complicated interactions or for which the impact or security risk is negligible.  \nIn some cases, rewards may be consolidated into a single payout. For example, multiple reports of the same vulnerability across different parameters of a resource, or demonstrations of multiple attack vectors against a fundamental framework issue.\nRewards may be reduced or declined if there is evidence of abuse, such as data exfiltration or withholding reports in order to chain multiple issues together.\nLegal\nIn connection with your participation in this program you agree to comply with all applicable local and national laws.\nYahoo reserves the right to change or modify the terms of this program at any time.\nYou may not participate in this program if you are a resident or individual located within a country appearing on any U.S. sanctions lists.\nVulnerabilities obtained by exploiting Yahoo users or employees are not eligible for a bounty and will result in immediate disqualification from the program.\nYahoo has never given permission/authorization (either implied or explicit) to an individual or group of individuals to extract personal information or content of Yahoo users and publicize this information on the open, public-facing Internet without user consent, nor has Yahoo ever given permission for programs or data belonging to Yahoo to be modified or corrupted in order to extract and publicly disclose data belonging to Yahoo.\nYahoo employees and contingent workers, as well as their immediate family members and persons living in the same household, are not eligible to receive bounties or rewards of any kind under the Yahoo Bug Bounty Program, whether hosted by Yahoo or any third party.\nExample Report\nTitle\nReflected XSS in www.inscopedomain.yahoo.com/payment\nIssue Information\nThe global_notice parameter on the /payment page is vulnerable to reflected cross-site scripting. \nThe global_notice parameter contains error message information that is interpreted and displayed to the user by their browser. To provide additional context for users, the â€œparamsâ€ portion of this serialized object can contain additional string or numerical data. By HTML-encoding a script tag, it is possible to inject content into the page:\na:1:{{s:5:\"errno\";i:1;s:3:\"params\";a:1:{i:0;s:39:\"\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;\";}}}\nTo reproduce this vulnerability, click this link once logged in to the application:\nhttps://inscopedomain.yahoo.com/payment?crumb=AABBCcddeeF\u0026amp;global_notice=a%3A1%3A%7B%7Bs%3A5%3A%22errno%22%3Bi%3A1%3Bs%3A3%3A%22params%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A39%3A%22%26%23%783c%3bscript%26%23%783e%3balert%26%23%78%32%38%3bdocument%26%23%78%32%65%3bcookie%26%23%78%32%39%3b%26%23%783c%3b%2fscript%26%23%783e%3b%22%3B%7D%7D%7D\nThe impact of this vulnerability is variable, depending on how it is used. An attacker could use this vulnerability to target a specific victim or post it in a popular forum frequented by users of this application. If an authenticated Yahoo user could be tricked into clicking the link it may result in malicious JavaScript executing in the context of the user's session and could result in credential/session theft, disclosure of sensitive information or other targeted attacks. This could result in multiple compromised accounts and theft of user-data and consequently, negative publicity and reputation damage to Yahoo. \nThis issue was discovered and verified on OSX 10.9 using Chrome 46 and Firefox 42.\nTo mitigate this vulnerability, consider the following:\n- Consider scaling back some features of the serialized object such that all that is returned is an error code. An attacker could still tamper with the error code, but the worst that could happen is an incorrect error message would be displayed.\n- Use output encoding to safely inject the text extracted from the JSON into the page.\n",
		"handle": "yahoo",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/019/c58d87995fab37c8e33dc09a9f9a82d719c3da10_large.?1439955244",
		"internet_bug_bounty": false
	},
	{
		"id": 20,
		"url": "/internet",
		"name": "The Internet",
		"meta": {
			"bug_count": 39,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Hack all the things.",
		"stripped_policy": "Some of the most critical vulnerabilities in the Internet's history have been resolved thanks to efforts of researchers fueled entirely by curiosity and altruism. We owe these individuals an enormous debt and believe it is our duty to do everything in our power to demonstrate how much this research is appreciated. To that end, the Internet Bug Bounty Panel will award public research into vulnerabilities with the potential for severe security implications to the public.\nSimply put: hack all the things, send us the good stuff, and we'll do our best to reward you.\nThe Fine Print\nTo qualify, vulnerabilities should meet most of the following criteria:\nBe vendor agnostic: vulnerability is present in implementations from multiple vendors or a vendor with dominant market share. Do not send us vulnerabilities that only impact a single website, product, or project.\nBe widespread: vulnerability manifests itself across a wide range of products, or impacts a large number of end users.\nBe severe: vulnerability has extreme negative consequences for the general public.\nBe novel: vulnerability is new or unusual in an interesting way.\nThe Panel will gladly assist with the coordinated disclosure of any potential vulnerabilities. However, we recognize that we will not be the most effective avenue in all circumstances. We will gladly consider rewards for vulnerabilities that have been publicly disclosed through some other means, provided they adhered to our disclosure guidelines.\nIt's important to keep in mind that not all submissions will qualify for a bounty. The decision to award a bounty is entirely at the discretion of the Internet Bug Bounty Panel.\nExamples\nWe provide the following examples of publicly disclosed vulnerabilities that we would have rewarded:\nSSL blockwise chosen-boundary attack, aka BEAST (http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-3389)\nDNS Insufficient Socket Entropy Vulnerability (http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-1447)\nDebian predictable PRNG (http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-0166)\nSotirov, et al. MD5 Collision attack against PKI (http://www.phreedom.org/research/rogue-ca/)\nBounty Guidance\nMinimum reward of $500 with significantly higher rewards granted at the Panel's discretion\nThanks @AllieBrosh (https://twitter.com/AllieBrosh) for personifying our mission\n",
		"handle": "internet",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/020/43be7b9b2b30b6a159e72c12fc720ad7e51bdfb9_large.png?1383767658",
		"internet_bug_bounty": true
	},
	{
		"id": 18,
		"url": "/phabricator",
		"name": "Phabricator",
		"meta": {
			"bug_count": 33,
			"accepting_submissions": true,
			"minimum_bounty": 300,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Phabricator is a collection of open source web applications that help software companies build better software.",
		"stripped_policy": "Security is serious business, just like Phabricator. If you can find a security vulnerability in the project, we’ll reward you with cold, hard cash. The cash will be transmitted electronically, so it will be cold and hard only figuratively.\nREAD THIS\nIMPORTANT: DO NOT TEST secure.phabricator.com. Do not test an install of Phabricator that you do not own. This includes secure.phabricator.com and any other existing install you might find. If you report an issue against secure.phabricator.com or another install you do not own, it will not be accepted. Instead, install a local copy of Phabricator. This will let you test Phabricator without disrupting other users.\nIMPORTANT: SERVER CONFIGURATION ISSUES DO NOT QUALIFY. Do not report configuration issues with phabricator.org, phabricator.com, etc. For example: software versions, SPF headers, etc. These are outside of program scope. The goal of this program is to find vulnerabilities in the Phabricator software itself.\nFor instructions on installing a local copy of Phabricator, see the Installation Guide (https://secure.phabricator.com/book/phabricator/article/installation_guide/).\nWe receive many reports (significantly more than 50%) from researchers who do not read these rules. To prove that you've read and understood these rules, please include the word \"mongoose\" somewhere in your report. If you do not, your report will be closed as \"Not Applicable\".\nThe Fine Print\nResponsibly disclose a previously unknown vulnerability directly to us.\nThis vulnerability must significantly compromise the security of a typical Phabricator installation.\nDenial of Service and Social Engineering attacks are unlikely to qualify unless particularly clever.\nVulnerabilities in Arcanist, libphutil, and Javelin are in scope.\nVulnerabilities in other bundled dependencies (in externals/ directories) qualify if they affect a typical Phabricator installation, but are less interesting than vulnerabilities in Phabricator itself.\nGetting Started\nYou can find the source and start looking for vulnerabilities on GitHub (https://github.com/facebook/phabricator).\nPhabricator has more than 300,000 lines of PHP, so there are probably at least sixty or seventy million security vulnerabilities in the project. Virtually limitless wealth!\nResponse Timeline\nWe will respond to reports within 24 hours.\nWe will fix security issues within 24 hours of confirming them.\nBounty Range: ~$300 - $3,000, based on severity. \n",
		"handle": "phabricator",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/018/d3d6ba3b5adbb70167b462312d9911c45a97a043_large.jpg?1487955532",
		"internet_bug_bounty": true
	},
	{
		"id": 22,
		"url": "/rails",
		"name": "Ruby on Rails",
		"meta": {
			"bug_count": 21,
			"accepting_submissions": true,
			"minimum_bounty": 1500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Web development that doesn't hurt.",
		"stripped_policy": "Rails is used to power some of the most important sites on the web and its increasing popularity has made it a critical piece of internet infrastructure. If you've found a security bug that could potentially impact the security of these sites, you have our thanks and might be eligible for a cash reward.\nBounty Qualification\nOnly critical vulnerabilities that demonstrate complete compromise of the system's integrity or confidentiality are eligible for a bounty - typically Arbitrary Code Execution, Universal SQL Injection, or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers.\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please contact us at panel@internetbugbounty.org. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\n",
		"handle": "rails",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/022/c607fba30bc9e1bcbe0504d86ffcb8d773742e4d_large.png?1383736680",
		"internet_bug_bounty": true
	},
	{
		"id": 27,
		"url": "/ibb-python",
		"name": "Python (IBB)",
		"meta": {
			"bug_count": 59,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying \"Thanks\" to the security researchers who take up this challenge.\nBounty Qualification\nOnly critical vulnerabilities that demonstrate complete compromise of the system's integrity or confidentiality are eligible for a bounty - typically Arbitrary Code Execution or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\n| Impact  | Amount |\n| --- | --- |\n| High Demonstrate that remote exploitation of this bug can be easily, actively, and reliably achieved. | $1,500+ |\n| Medium Demonstrate that remote exploitation of this bug is very likely (e.g. good control a register). | $1,000 |\n| Minimum Demonstrate the presence of a security bug with probable remote exploitation potential. | $500 |\nOnly vulnerabilities in the core Python programming language and standard library will be considered for eligibility. Submissions related to python.org and other project websites are explicitly NOT eligible.   \nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/python).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\nWhen should you report to security@python.org?\nDepending on the risk of the issue, sometimes security@python.org might not be the best channel to report it.\nThe risk level is often determined by a product of the impact once exploited, and the probability of exploitation occurring. In other words, if a bug can cause great damage, but it takes highest privilege to exploit the bug, then the bug is not a high risk one. Similarly, if the bug is easily exploitable, but its impact is limited, then it is not a high risk issue either.\nThere is not any hard and fast rule to determine if a bug is worth reporting. The general rule is any attack worth reporting via the security address must allow an attacker to affect the confidentiality, integrity and availability of the Python application or its system for which the attacker does not already have the capability.\nTo illustrate the point, here are some examples of past issues and what the Python Security Response Team (PSRT) thinks of them. When in doubt, however, please do send us a report nonetheless. If the responder can't find any relevant exploitable code, the report may be re-posted publicly.\nPublic disclosure preferred\nIn issue #27863 (http://bugs.python.org/issue27863), several problems such as use-after-free, and out-of-bound memory access in module elementtree were reported. However, the exploit cannot be provoked by providing it with XML data.  It requires that the attacker be able to provoke the execution of the __getstate__ method, which is something an attacker would only be able to do if they had the ability to execute arbitrary Python code, or, if they could somehow coerce the application to pickle an XML tree.  Neither of these are generally possible from an unprivileged position.\nIssue #272829 (http://bugs.python.org/issue27773) is a double-free bug in a highly critical builtin module ssl. However, the bug requires an attacker who can cause PyWeakref_NewRef to fail, which means the ability to deterministically exhaust memory at a specific point in C code execution.\nWhile these are clearly important bugs to fix, and may, in some hypothetical situations, have a security impact, the only proof of concept the PSRT can imagine for any of them is to be able to execute arbitrary Python code.  If you can already execute Python code, there are far worse things you can do than provoke a use-after-free or an interpreter crash.\nPrivate disclosure preferred\nIssue #7673 (http://bugs.python.org/issue7673) is a security vulnerability that affect an obscure corner of the standard library but it is appropriate to disclose privately, because the APIs that it affects are ones designed to handle untrusted data, something that an attacker could plausibly get a Python program to consume with the expectation that it would be safe.\nIssue #17239 (http://bugs.python.org/issue17239)  and #24238 (http://bugs.python.org/issue24238) are similar security vulnerabilities affecting multiple popular builtin modules such as expat and elementtree.  They allow an attacker to render a Python application unavailable by feeding it malicious XML data.\nThe common theme of these vulnerabilities is they let the attacker escalate privilege from unprivileged position.  Arbitrary python code execution is the highest level of privilege possible in the python interpreter.  There are other modules (such as marshal) which explicitly say that all data must be taken from only trusted sources (and hence privileged).\n",
		"handle": "ibb-python",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/027/32a6c71a9be33e589193ee8c2d9bd693b880f789_large.png?1383737131",
		"internet_bug_bounty": true
	},
	{
		"id": 23,
		"url": "/django",
		"name": "Django",
		"meta": {
			"bug_count": 5,
			"accepting_submissions": true,
			"minimum_bounty": 250,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "Django is used to power some of the most important sites on the web and its increasing popularity has made it a critical piece of internet infrastructure. If you’ve found a security bug that could potentially impact the security of these sites, you have our thanks and might be eligible for a cash reward.\nBounty amounts are based on severity and will range from $250 to $3,000 USD.\nThe Fine Print\nResponsibly disclose a previously unknown vulnerability using the HackerOne platform, or directly to us while following our guidelines for reporting security issues (https://docs.djangoproject.com/en/dev/internals/security/)\nThe vulnerability must significantly compromise the security of a typical Django installation.\nLow priority vulnerabilities, such as Denial of Service attacks, are unlikely to qualify.\nVulnerabilities in dependencies may qualify only if they are exploitable in the context of a typical Django installation.\nYou should install Django on a server you own and test locally. Testing against a server without permission is grounds for disqualification. For help, see our Getting Started Guide (https://docs.djangoproject.com/en/dev/intro/)\nWe maintain a detailed archive of security issues (https://docs.djangoproject.com/en/dev/releases/security/) to provide examples of the type of issues we’re interested in learning about.\nIf you’re also a developer, you can optionally send us a patch for the issue. If we end up accepting your patch, we may add an extra bonus to your bounty depending on the complexity and completeness of the patch.\nYOU MAY NOT TEST AGAINST SERVERS YOU DO NOT HAVE EXPLICIT PERMISSION TO TEST. YOU DO NOT HAVE PERMISSION TO SCAN THE DJANGOPROJECT.COM SERVERS.\nIF YOU TEST AGAINST THE DJANGOPROJECT.COM SERVERS, YOU WILL NOT BE REWARDED ANY BOUNTY.\nBounty ranges\nThe Django team reserves the right to make the final call on the specific bounty amount for any issue, but to give you an idea of our priorities, here are some rough ranges for bounties, and the types of issues we expect would fall into each range:\nSevere issues: $2000 - $3000\n* Remote code execution\n* SQL injection\nModerate issues: $500 - $2000\n* XSS\n* CSRF\n* Broken authentication\nLow severity issues: $250 - $1000\n* Sensitive data exposure\n* Broken session management\n* Unvalidated redirects/forwards\n* Issues requiring an uncommon configuration option\nNo Reward: $0\n* Any behavior which is clearly documented\n* Any behavior which is the result of deliberate misconfiguration\n* Issues in third-party libraries (please report issues directly to the maintainers)\n* Issues discovered while scanning without permission\n* The OPTIONS header\n",
		"handle": "django",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/023/373d728247708ef47e76d7999517a16f77454e27_large.png?1383736780",
		"internet_bug_bounty": true
	},
	{
		"id": 25,
		"url": "/ibb-nginx",
		"name": "Nginx (IBB)",
		"meta": {
			"bug_count": 3,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "Nginx is a free, open-source, high-performance HTTP server and reverse proxy. It powers some of the most important sites on the web, making it an undeniably critical piece of internet infrastructure. The project has a strong security track record and uncovering potential vulnerabilities is increasingly difficult. These bounties are our way of saying \"Thanks\" to the security researchers who take up this challenge.\nBounty Qualification\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well. Our rewards are tied to the severity level as determined by the project.\nMajor (with RCE): $3,000\nMajor: $1,500\nMedium: $500\nMinor: N/A\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/nginx).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\n",
		"handle": "ibb-nginx",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/025/b73d5477bbcb74c4fd76f556fb6d7b47c14ade01_large.png?1383736949",
		"internet_bug_bounty": true
	},
	{
		"id": 24,
		"url": "/ibb-openssl",
		"name": "OpenSSL (IBB)",
		"meta": {
			"bug_count": 26,
			"accepting_submissions": true,
			"minimum_bounty": 2500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "OpenSSL has become the de facto standard for enabling cryptographically secure communication, and its integrity is of critical importance to preserving the privacy of all Internet users. The project's exceptional security track record has made the discovery of potential security vulnerabilities an increasingly difficult task. The security researchers who succeed in this challenge deserve our gratitude.\nBounty Qualification\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well. Our rewards are tied to the security severity level (https://www.openssl.org/policies/secpolicy.html) as determined by the project.\nCritical: $5,000+\nHigh: $2,500\nModerate: $1,000\nLow: $500\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.\nOnly versions currently supported by the upstream project are eligible. Please verify your issue is present in a current release before submission.\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/openssl).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\n",
		"handle": "ibb-openssl",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/024/6303aba182606d1689a5a9c3b61b67b027c11b89_large.png?1384251609",
		"internet_bug_bounty": true
	},
	{
		"id": 29,
		"url": "/ibb-php",
		"name": "PHP (IBB)",
		"meta": {
			"bug_count": 222,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying \"Thanks\" to the security researchers who take up this challenge.\nBounty Qualification\n| Classification  | Amount |\n| --- | --- |\n| High (https://wiki.php.net/security#high_severity) | $1,500+ |\n| Medium (https://wiki.php.net/security#medium_severity) | $500 |\nThe project maintainers have final decision on which issues constitute security vulnerabilities. Only issues that are classified as a security issue (https://wiki.php.net/security) by a project maintainer will be considered for bounty eligibility. The Panel will respect their decision, and we ask that you do as well.\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/php).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\n",
		"handle": "ibb-php",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/029/0cfa876e5b3223d03cc644fbdf5b95d5ac0e32bb_large.png?1385119730",
		"internet_bug_bounty": true
	},
	{
		"id": 30,
		"url": "/ibb-perl",
		"name": "Perl (IBB)",
		"meta": {
			"bug_count": 1,
			"accepting_submissions": true,
			"minimum_bounty": 1500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "The Internet Bug Bounty Panel is awarding bounties for critical security vulnerabilities in popular, open source programming languages. Thanks to the hard work of the developers of these languages, uncovering vulnerabilities in this software is increasingly challenging. These bounties are our way of saying \"Thanks\" to the security researchers who take up this challenge.\nBounty Qualification\nOnly critical vulnerabilities that demonstrate complete compromise of the system's integrity or confidentiality are eligible for a bounty - typically Arbitrary Code Execution or equivalent impact. While we encourage you to submit all potential issues, lower severity issues are not in scope at this time.\n| Impact  | Amount |\n| --- | --- |\n| High Demonstrate that remote exploitation of this bug can be easily, actively, and reliably achieved. | $1,500+ |\n| Medium Demonstrate that remote exploitation of this bug is very likely (e.g. good control a register). | $1,000 |\n| Minimum Demonstrate the presence of a security bug with probable remote exploitation potential. | $500 |\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well.\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/perl).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\n",
		"handle": "ibb-perl",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/030/fa1cafb59b3297018245cf2822953972bfdf304c_large.png?1383737333",
		"internet_bug_bounty": true
	},
	{
		"id": 26,
		"url": "/ibb-apache",
		"name": "Apache httpd (IBB)",
		"meta": {
			"bug_count": 4,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "The Apache HTTP server is ubiquitous with the Internet, having remained the single most popular web server since early 1996. The excellent work of the volunteers on the Apache Security Team help ensure the security of countless websites, and the Internet Bug Bounty Panel would like to show our gratitude.\nBounty Qualification\nThe project maintainers have final decision on which issues constitute security vulnerabilities. The Panel will respect their decision, and we ask that you do as well. Our rewards are tied to the security impact level (http://httpd.apache.org/security/impact_levels.html) as determined by the project.\nCritical: $3,000\nImportant: $1,500\nModerate: $500\nLow: N/A\nIt's important to keep in mind that not all submissions will qualify for a bounty, and that the decision to award a bounty is entirely at the discretion of the Panel.\nSubmission Process\nDisclose a previously unknown security vulnerability directly to the project maintainers (https://hackerone.com/apache).\nFollow the disclosure process established by the project maintainers.\nClearly demonstrate the security vulnerability. Respect the time of the project volunteers as they cannot invest significant effort into incomplete reports. Low-quality reports may be disqualified.\nOnce a public security advisory has been issued, please submit a report here. You must not send us the details of the vulnerability until it has been validated, accepted, and publicly disclosed by the project maintainers.\nThis is an independent process not managed by the Apache Software Foundation. Participation is optional.\n",
		"handle": "ibb-apache",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/026/4a44599ad936463a8a980c89d3b42e8bda607638_large.png?1384379101",
		"internet_bug_bounty": true
	},
	{
		"id": 13,
		"url": "/security",
		"name": "HackerOne",
		"meta": {
			"bug_count": 193,
			"accepting_submissions": true,
			"minimum_bounty": 500,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Vulnerability disclosure should be safe, transparent, and rewarding.",
		"stripped_policy": "We've built HackerOne from the ground up with security as our top priority. Even so, we believe that all technology contains bugs and that the public plays a crucial role in identifying these bugs. If you believe you've found a security bug in our service, we'll gladly work with you to resolve that issue and ensure you are fairly compensated for your discovery.\nIf you are looking to report a non-security-related bug in HackerOne, please submit here (https://support.hackerone.com/hc/en-us/requests/new) instead.\nWe categorize security bugs in our service into two categories:\nSevere: Any bug that might grant unauthorized access to confidential bug descriptions. Severe bugs have a minimum bounty of $10,000.\nInteresting: Any bug that might otherwise potentially impact the security of our service. Interesting bugs have a minimum bounty of $500.\nWe believe in transparency about our security, so any valid vulnerabilities discovered are always publicly disclosed once confirmed and resolved.\nBelow we'll describe some of the measures we take to keep our service safe and secure.\nApplication Security\nSeveral of our engineers live double lives as security engineers and penetration testers. All commits go through mandatory code and security review, along with examination by static analysis tools.\nAll data access and mutation goes through a stringent Command Query Responsibility Segregation (CQRS) framework for centralized auditing, authentication, and authorization.\nThis framework utilizes strong typing and parameterization to eliminate SQL Injection attacks, as well as enforcing the presence of an anti-CSRF token prior to any data mutation.\nWe utilize a strict Content Security Policy (https://en.wikipedia.org/wiki/Content_Security_Policy) and a safe-by-default templating language to effectively neutralize Cross-Site Scripting (XSS).\nWe encrypt all network communications with SSL/TLS accompanied with Perfect Forward Secrecy (https://en.wikipedia.org/wiki/Forward_secrecy#Perfect_Forward_Secrecy) and HTTP Strict Transport Security (HSTS) (https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security), including being HSTS preloaded (https://hstspreload.appspot.com/) in most major browsers.\nAll requests pass through multiple rate limiting implementations to protect against brute-force attacks.\nWe don't store passwords: we store bcrypt(13, salt, strcat(password, sha512(app-token, env-token))).\nPasswords must be a minimum of 8 characters and pass a zxcvbn (https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/) strong entropy check.\nUser-submitted content (such as attachments and images) is stored in AWS S3, encrypted at rest, and served from a sandboxed domain, protecting from Same-origin Policy (https://en.wikipedia.org/wiki/Same-origin_policy) attacks.\nTwo-factor authentication and IP whitelisting are available to further restrict access to accounts.\nRole-based access control allows for granular permissions for team members.\nNo credit card information is stored on our servers. We use Stripe (https://stripe.com/docs/security), a PCI Level 1 service provider.\nInfrastructure \u0026amp; Operational Security\nAll our infrastructure is hosted on Amazon Web Services in SOC 1, 2, and 3 (https://aws.amazon.com/compliance/soc-faqs/) and ISO 27001 (https://aws.amazon.com/compliance/iso-27001-faqs/) certified datacenters.\nNetwork segregation is aggressively deployed between services and environments.\nDatabases, files, and backups are encrypted at rest using AES-256.\nAll infrastructure access requires two-factor, multi-stage authentication.\nWe leverage CloudFlare (https://www.cloudflare.com) to supplement our infrastructure's resilience.\nEnforced usage of strong passwords, password managers, client encryption, mobile device management, and screen locking.\nAll employees undergo a criminal background check upon hiring.\n… and more. We're constantly seeking to improve. If you have any questions on our security or suggestions on how HackerOne could be improved, please let us know at support@hackerone.com.\nScope Exclusions\nThe following categories of reports are considered out of scope for our program and will not be rewarded:\nReports which target a lack of host header validation or that exploit multiple forward slashes (https://hackerone.com/reports/52035) at the root of the path segment of a URL. Both of these issues are known to both us and CloudFlare, and their resolution is outside our control.\nSpamming other users with automated HackerOne emails or notifications (e.g. abusing the forgot password form).\nFor reports addressing support.hackerone.com unless they are critical or severe issues they will be marked as not applicable. support.hackerone.com is hosted by Zendesk, and as such general reports should be submitted to their program instead via @zendesk. \nReports which enumerate already claimed user and program handles (https://hackerone.com/reports/29185). This reveals no sensitive information, regardless of whether the associated profiles are public or private.\nReports which involve constructing a markdown link in such a way that it may appear confusing in the external link warning interstitial page, despite being properly decoded and fully enclosed in the demarcated \"External link\" box.\nReports relating to the execution of CSV content by a third-party client application due to special treatment of certain characters in the exported CSV.\nReports relating to invitation expiration dates.\nReports relating to self-DoS issues (as in, only the person doing the action is denied service).\nReports relating to missing rate limiting of our API (https://api.hackerone.com/). We intentionally made this design decision to learn how people use our API. We plan to implement a rate limit in the future.\nThe ability to game the badges functionality by closing submissions reported by yourself or a team member in a verified program.\nThe ability to influence reputation/signal/impact via socially engineering a program's team members.\nReports which disclose the existence of private programs that are using SAML\n",
		"handle": "security",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/013/3e78370a1de3a421fe93ce1984f365e74bb230aa_large.png?1445331713",
		"internet_bug_bounty": false
	},
	{
		"id": 1492,
		"url": "/drchrono",
		"name": "drchrono",
		"meta": {
			"bug_count": 330,
			"accepting_submissions": false,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "drchrono is an electronic health records platform (EHR \u0026  PHR), with a focus on providing modern iPad, iPhone, and Web software to doctors \u0026 patients.",
		"stripped_policy": "*Please note: we have temporarily disabled reporting new issues in order to address the issues already reported. Do not submit tickets to our support channels, as they will be ignored. *\nMaintaining top-notch security is an ongoing priority at drchrono, and you can help us make drchrono more secure. If you believe you have a found a security vulnerability, we encourage you to let us know as soon as possible so we can do our best to fix the problem immediately.\nWe strive to triage reports within 3-5 business days and to comment/resolve found issues within 30-45 business days.\nThe following sites and applications are in scope for this program: \nWeb:\n- drchrono.com (https://www.drchrono.com) (doctor platform)\n- onpatient.com (https://www.onpatient.com) (patient portal)\n- drchrono API (https://drchrono.com/api/)  \niOS: \n- drchrono iPad EHR (https://itunes.apple.com/us/app/drchrono-ehr/id369191782) (iOS app)\n- drchrono EMR (https://itunes.apple.com/us/app/drchrono-emr/id363897223) (iOS app)\n- drchrono Patient Check-In (https://itunes.apple.com/us/app/drchrono-patient-check-in/id451034317)  (iOS app)\n- onpatient (https://itunes.apple.com/us/app/onpatient-phr-personal-health/id577198251)  (iOS app)\n- ICD-10 HCPCS ICD-9 (https://itunes.apple.com/us/app/icd-10-hcpcs-icd-9/id985356608) (iOS app)\nNon-qualifying Reports\nThe following issues are outside the scope of our program: \nThe drchrono Android app (it's just a webview of our site and it's no longer supported)  \nIssues related to software not under drchrono control \nProvisioning errors \nViolation of licenses or other restrictions applicable to any vendor's product \nSocial engineering techniques on drchrono or medical practice staff \nSpam \nPhishing\nDenial-of-service attacks, unless they are part of another attack (e.g. a deflation bomb which is used to disable a virus scanner, which then allows standard attacks)\nAdditionally, issues which we are unable to reproduce will be closed as not applicable.\nRewards\nEligible reporters of qualifying security vulnerabilities may receive rewards. Our minimum reward for reports that demonstrate leaked or modified doctor or patient data is $50 USD. There is no maximum. drchrono will determine whether the minimum reward should be granted to reports that don't demonstrate a full exploit (e.g. XSS limited to within a practice group). This is not a competition and only one reward per security bug will be awarded.\nFor reports that demonstrate PHI exposure from outside of the owner's account (does not require malicious staff), we will award a minimum of $200. For large-scale PHI exposure from outside the account, we will award a minimum of $500.\nAPI\nTo get access to the API, you must email api@drchrono.com with your drchrono and HackerOne username. You can then create an API application at https://drchrono.com/api-management. The minimum award for security bugs in the API is $100 instead of $50.\nThank you.\n",
		"handle": "drchrono",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/001/492/45c15594565591f9a8a34db650361b97a56e6930_large.png?1428339863",
		"internet_bug_bounty": false
	},
	{
		"id": 9409,
		"url": "/veris",
		"name": "Veris",
		"meta": {
			"bug_count": 154,
			"accepting_submissions": false
		},
		"about": "",
		"stripped_policy": "Veris Program has been closed temporarily\n",
		"handle": "veris",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/009/409/1e81d80f675e91c81bcbee2bf252595d61ac0960_large.png?1461310869",
		"internet_bug_bounty": false
	},
	{
		"id": 218,
		"url": "/xero",
		"name": "Xero",
		"meta": {
			"bug_count": 137,
			"accepting_submissions": false
		},
		"about": "Beautiful accounting software",
		"stripped_policy": "We are currently not accepting reports via HackerOne\nDue to recent changes in the security policy within Xero we’ve decided to put a hold on our bug bounty program on HackerOne. At this time if you do have any security bugs to report, or questions about security at Xero, please submit them via email to support@xero.com\nWe thank all the researchers that have submitted findings for their dedication and hard work, we’ve received many excellent submissions and wish all researchers the best of luck in their future endeavours.\nIf you have any questions or concerns, please email support@xero.com\nThanks\nXero Product Security Team\nSecuring your data is very important to us\nThank you for your interest in Xero's coordinated disclosure programme. If you have found a vulnerability in Xero or plan to look for one, please follow the guidelines on this page.\nCoordinated Disclosure\nXero supports the efforts of the internet community to make the online world a safer place for everyone. We have worked with the NZITF (http://nzitf.org.nz/) in New Zealand and endorse the spirit and content of their Coordinated Disclosure Guidelines (http://www.nzitf.org.nz/pdf/NZITF_Disclosure_Guidelines_2014.pdf) (PDF), which is a good read for both researchers and other organisations looking to implement their own programmes.\nCoordinated / Responsible disclosure is based on four main basic principles:\nBoth parties will act in good faith to identify and fix security vulnerabilities. \nBoth parties will ensure they act within the law. \nFinders should be able to come to owners directly without relying on a third party without fear of vexatious legal action. \nThe vulnerability, and the fact that the finder found it, will ordinarily be made public at the end of the process. \nWe guarantee that if a research discloses issues to us in a responsible manner, following the guidelines on this page, then we won't proceed with any legal action.\nTest accounts and trial organisations\nIf you are researching security issues, please use test accounts that you sign up and control, and limit your testing to those accounts and organisations which are under your control. This is to respect the privacy of our other users.\nInformation on how to create demo and trial organisations for test purposes is available on the Xero Developer Center (http://developer.xero.com/documentation/getting-started/development-accounts/)\nEligibility and coordinated disclosure\nWe are happy to list your name on our Hall of Fame under the following conditions:\n- You are the first person to report a particular issue to us\n- You agree to work with us to disclose the issue according to these guidelines\n- There is no public disclosure of the issue without our consent\nWe are unable to provide monetary or non-monetary rewards. \nScope of program\nPlease use the lists below as a guide for the scope of the program. You may report issues outside the defined scope, but it is unlikely these reports will be recognised in our Hall of Fame.\nPossible issues include but are not limited to:\nCross Site Scripting (XSS)\nCross Site Request Forgery (CSRF)\nRemote Code Execution (RCE)\nUnauthorised Access to other organisations data within Xero\nWe are particularly interested in issues related to the following sites:\ngo.xero.com\nmy.xero.com\nlogin.xero.com\nconnect.banking.xero.com\npayroll.xero.com\nWe are also interested in vulnerabilities in the following applications:\nXero for Android (https://play.google.com/store/apps/details?id=com.xero.touch)\nXero for iOS (https://itunes.apple.com/app/xero/id441880705)\nPlease refrain from accessing private information (use test accounts instead), performing actions that may negatively affect Xero users (spam, denial of service), or sending reports from automated tools without verifying them.\nThe following issues are outside the scope of our white hat program:\nIssues related to software or protocols not under Xero's control\nReports from automated tools or scans\nSocial engineering of Xero staff or contractors \nAny physical attempts against property or IT infrastructure belonging to Xero or any of our IT hosting and network service providers\nAttacks requiring physical access to a user's device\nForms missing CSRF tokens (we require evidence of actual CSRF vulnerability)\nLogin/logout CSRF\nInvalid or missing SPF (Sender Policy Framework) records\nReports of spam or phishing (see here (https://www.xero.com/about/security/) for more info)\nVulnerabilities only affecting users of outdated or unpatched browsers and platforms\nIssues without clearly identified security impact, such as clickjacking on a static website, missing security headers, or descriptive error messages\nPermission is required from the Xero Security Team before using automated tools or scans, performing brute force attacks, or denial of service. Any attacks which affect other users or infrastructure will be outside these guidelines.\nContact us\nTo start a conversation with the Xero Security Team, or to contact us for any other reason, please use the \"Submit Report\" button on this page. We will aim to respond within two working days (hopefully sooner!), and will then discuss any timelines for further responses with you.\n",
		"handle": "xero",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/218/1c9baa922af4753bcf103bb80a163d918ef8a140_large.jpg?1402546516",
		"internet_bug_bounty": false
	},
	{
		"id": 7014,
		"url": "/munzee",
		"name": "Munzee",
		"meta": {
			"bug_count": 38,
			"accepting_submissions": false,
			"minimum_bounty": 5,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "No technology is perfect, and Munzee believes that working with skilled security researchers across the globe is crucial in identifying weaknesses in any technology. If you believe you've found a security issue in our product or service, we encourage you to notify us. We welcome working with you to resolve the issue promptly.\nFocus On\nPlease focus on our open API. Any bugs with our API will be awarded with bigger bounties.\nhttps://www.munzee.com/api/\nhttps://www.munzee.com/api-docs/\nDisclosure Policy\nLet us know as soon as possible upon discovery of a potential security issue, and we'll make every effort to quickly resolve the issue.\nProvide us a reasonable amount of time to resolve the issue before any disclosure to the public or a third-party.\nMake a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our service. Only interact with accounts you own or with explicit permission of the account holder.\nExclusions\nWhile researching, we'd like to ask you to refrain from:\n* Denial of service\n* Spamming\n* Social engineering (including phishing) of Munzee staff or contractors\n* Any physical attempts against Munzee property or data centers\nThank you for helping keep Munzee and our users safe!\n",
		"handle": "munzee",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/007/014/b6b808a8625a2e2b8a44a5d7b348f9984f3c3104_large.png?1444359738",
		"internet_bug_bounty": false
	},
	{
		"id": 3056,
		"url": "/kiwi-ki",
		"name": "KIWI.KI GmbH",
		"meta": {
			"bug_count": 11,
			"accepting_submissions": false,
			"minimum_bounty": 100,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "KIWI.KI provides secure, hands-free access for large multi-tenant buildings.",
		"stripped_policy": "While KIWI.KI strives to provide a highly secure and privacy-sparing service, we understand that no technology is perfect. We believe that working with security researchers is absolutely crucial in identifying and solving weaknesses with our system. If you believe you've found a security issue in one of our products or services, we encourage you to notify us. We welcome working with you to resolve the issue promptly.\nAt the moment, we have momentarily paused submissions as we are working through the large list of reported issues. Within the upcoming weeks, we will unpause submissions, once we have fixed or mitigated  and disclosed the majorty of the reported issues.\nDisclosure Policy\nLet us know as soon as possible upon discovery of a potential security issue, and we'll make every effort to quickly resolve the issue.\nProvide us a reasonable amount of time to resolve the issue before any disclosure to the public or a third-party.\nMake a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our service. Only interact with accounts you own or with explicit permission of the account holder.\nBounty Program\nTo show our appreciation of responsible security researchers, KIWI.KI offers a monetary bounty for reports of qualifying security vulnerabilities. Reward amounts will vary based upon the severity of the reported vulnerability, and eligibility is at our sole discretion. Current or former employees of KIWI.KI and their families are excluded from the bounty program.\nCharity Program\nSecurity researchers may elect to donate their bounty to a non-profit organization of their choice. In this case, the bounty amount will be doubled.\nRecognition\nUnless otherwise requested, we will post the information of researchers who have submitted valid reports on our website. \nFocus\nCurrently, our focus is on the customer-facing products and services that KIWI.KI provides. Security and privacy are prioritized equally.\nScope\nA word to scope: The scope as outlined below is what we have set a bounty on, as they are the most safety- and privacy-critical. Our main website, analytics suites, web-attached CRM systems, or other ancillary services are not covered by our bounty (but we appreciate the help!)\nExclusions\nWhile researching, we'd like to ask you to refrain from:\n* Denial of service\n* Spamming\n* Social engineering (including phishing) of KIWI.KI staff, contractors, or customers\n* Any physical attempts against KIWI.KI property or data centers\n* Any illegal activity (unless it is illegal to do security research, in which case go right ahead)\nThank you for helping keep KIWI.KI and our users safe!\n",
		"handle": "kiwi-ki",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/003/056/1a071a2e140b7a7c293d8e48cb4e2b5ba9d527b7_large.png?1438778541",
		"internet_bug_bounty": false
	},
	{
		"id": 7747,
		"url": "/leaseweb",
		"name": "LeaseWeb",
		"meta": {
			"bug_count": 70,
			"accepting_submissions": false,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Reliable hosting",
		"stripped_policy": "At LeaseWeb, we consider the security of our systems a top priority. But no matter how much effort we put into system security, there can still be vulnerabilities present. No technology is perfect, and LeaseWeb believes that working with skilled security researchers across the globe is crucial in identifying weaknesses in any technology. If you believe you've found a security issue in our product or service, we encourage you to notify us. We welcome working with you to resolve the issue promptly.\nDisclosure Policy\nLet us know as soon as possible upon discovery of a potential security issue, and we'll make every effort to quickly resolve the issue.\nProvide us a reasonable amount of time to resolve the issue before any disclosure to the public or a third-party.\nMake a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our service. Only interact with accounts you own or with explicit permission of the account holder.\nBounty Program\nTo show our appreciation of responsible security researchers, LeaseWeb offers a monetary bounty for reports of qualifying security vulnerabilities with a minimum of $50. Reward amounts will vary based upon the severity of the reported vulnerability, and eligibility is at our sole discretion. Rewards will only be paid via HackerOne.\nEligibility\nTo qualify for a bounty, you must:\n* be the first reporter of the vulnerability\n* You follow https://hackerone.com/disclosure-guidelines\n* You do not access data of other users and solely use your created accounts.\n* You may not publicly disclose the vulnerability prior to our resolution.\n* You are not an individual on, or residing in any country on, any U.S. sanctions lists.\n* You provide a working proof of concept that exploits the security issue\nExclusions\nWhile researching, we'd like to ask you to refrain from:\n* Social engineering (including phishing) of LeaseWeb staff or contractors\n* Any physical attempts against LeaseWeb property or data centers\n* Denial of service\n* Login/Logout CSRF\n* Self-XSS (we require evidence on how the XSS can be used to attack another LeaseWeb user)\n* Miss of rate limits\n* Report from automated tools and scans\n* Vulnerabilities sending spam or unauthorised messages\n* Bugs in 3rd party software\n* X-Frame-Options related\n* Missing cookie flags on non-sensitive cookies\n* Missing security headers which do not lead directly to a vulnerability (unless you deliver a PoC)\n* Physical attack on the infrastructure\n* DKIM/SPF/DMARC issues (we are aware they are missing and working on resolution)\n* XSS-issues on leasewebnoc.com / noc.leaseweb.com\n* Version exposure (unless you deliver a PoC of working exploit)\n* Directory listing with already public readable content\nThank you for helping keep LeaseWeb and our users safe!\n",
		"handle": "leaseweb",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/007/747/678364b693fc8bd173ff69d298bac9f319647b96_large.png?1449580825",
		"internet_bug_bounty": false
	},
	{
		"id": 6801,
		"url": "/bithunt",
		"name": "BitHunt",
		"meta": {
			"bug_count": 11,
			"accepting_submissions": false
		},
		"about": "BitHunt is a user generated and rated directory for Bitcoin products",
		"stripped_policy": "No technology is perfect, and BitHunt believes that working with skilled security researchers across the globe is crucial in identifying weaknesses in any technology. If you believe you've found a security issue in our product or service, we encourage you to notify us. We welcome working with you to resolve the issue promptly.\nDisclosure Policy\nLet us know as soon as possible upon discovery of a potential security issue, and we'll make every effort to quickly resolve the issue.\nProvide us a reasonable amount of time to resolve the issue before any disclosure to the public or a third-party.\nMake a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our service. Only interact with accounts you own or with explicit permission of the account holder.\nBounty Program\nWhile we appreciate your efforts in helping us keep our service safe, BitHunt cannot provide any monetary rewards at the moment.\nIn scope\nXSS\nVote manipulation\nInsertion of unapproved listings to the directory\nExclusions\nWhile researching, we'd like to ask you to refrain from:\n* Denial of service\n* Spamming\n* Social engineering (including phishing) of BitHunt staff or contractors\n* Any physical attempts against BitHunt property or data centers\n* Exposure of server or other component versions (OS version, HTTP server version etc..)\n* ANY open ports\nThank you for helping keep BitHunt and our users safe!\n",
		"handle": "bithunt",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/006/801/ed44f54920877ccf40f335687a4b8c2b5ae955ab_large.png?1441807968",
		"internet_bug_bounty": false
	},
	{
		"id": 5012,
		"url": "/dropbox-acquisitions",
		"name": "Dropbox Acquisitions",
		"meta": {
			"bug_count": 39,
			"accepting_submissions": false,
			"minimum_bounty": 216,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Your stuff, anywhere",
		"stripped_policy": "Keeping user information safe and secure is a top priority and a core company value for us at Dropbox. We welcome the contribution of external security researchers and look forward to awarding them for their invaluable contribution to the security of all Dropbox users. \nPlease be respectful of our existing applications. Spamming forms through automated vulnerability scanners will not result in any bounty or award since those are explicitly out of scope. Further, issues in chat forms, contact forms are not eligible for bounties.\nRewards\nDropbox, at its discretion, may provide rewards to vulnerability reporters. Our minimum reward is $216 USD. There is no maximum reward. Reward amounts may vary depending upon the severity of the vulnerability reported and quality of the report. Keep in mind that this is not a contest or competition. \nScope\nFor the acquisitions program, a product must have been acquired by Dropbox over at least six months previous to the time the report submission to be eligible for the bounty program. \nVulnerabilities reported on acquisition applications are often not eligible for monetary rewards. However they are still eligible, at our discretion, for award bounties for particularly novel or severe vulnerabilities. \nEligibility and Responsible Disclosure\nYou are responsible for complying with any applicable laws, and you should only use your own accounts or test accounts for reporting vulnerabilities. \nTo promote the discovery and reporting of vulnerabilities and increase user safety, we ask that you:\n- Share the security issue with us in detail\n- Give us a reasonable time to respond to the issue before making any information about it public.\n- Not access or modify user data without permission of the account owner.\n- Act in good faith not to degrade the performance of our services (including denial of service).\nWe only reward the first reporter of a vulnerability. Public disclosure of the vulnerability prior to resolution will result in disqualification from the program. You must report a qualifying vulnerability through the HackerOne reporting tool to be eligible for a monetary reward.  \nOut-of-scope Vulnerabilities\nAny vulnerabilities in Pixelapse, Loom, MobileSpan, Readmill and other websites that aren't Dropbox branded products are currently out of scope for this program. We are shutting down these sites.\nThe following issues are outside the scope of our rewards program:\n- Our policies on presence/absence of SPF/DMARC records\n- Password, email and account policies, such as email id verification, reset link expiration, password complexity\n- Lack of CSRF tokens (unless there is evidence of actual, sensitive user action not protected by a token)\n- Login/logout CSRF\n- Attacks requiring physical access to a user's device\n- Missing security headers which do not lead directly to a vulnerability\n- Missing best practices (we require evidence of a security vulnerability)\n- Hosting malware/arbitray content on Dropbox and causing downloads\n- XSS on dropboxusercontent.com is out of scope\n- Self-XSS (we require evidence on how the XSS can be used to attack another Dropbox user)\n- XSS on any site other than *.dropbox.com.\n- Any XSS on dl-web.dropbox.com that requires more than just sharing ( asking the user to click and open a malicious shared file is out of scope currently)\n- dropboxforums.com XSS is also out of scope\n- Host header injections unless you can show how they can lead to stealing user data.\n- Use of a known-vulnerable library (without evidence of exploitability)\n- Issues related to software or protocols not under Dropbox control\n- Reports from automated tools or scans\n- Reports of spam (i.e., any report involving ability to send emails without rate limits)\n- Bypass of malware detection\n- Attacks that require attacker app to have the permission to overlay on top of our app (e.g., tapjacking)\n- Vulnerabilities affecting users of outdated browsers or platforms\n- Social engineering of Dropbox employees or contractors\n- Any physical attempts against Dropbox property or data centers\n- Presence of autocomplete attribute on web forms\n- Missing cookie flags on non-sensitive cookies\n- Reports of insecure SSL/TLS ciphers (unless you have a working proof of concept, and not just a report from a scanner)\n- Any report that discusses how you can learn whether a given username, email address has a Dropbox account.\n- Any access to data where the targeted user needs to be operating a rooted mobile device.\n- Any report on bypassing our storage limits etc is out of scope\n- Any report about DLL hijacking without demonstrating how it gains new privileges is also out of scope.\nThe Fine Print\nYou are responsible for paying any taxes associated with rewards. We may modify the terms of this program or terminate this program at any time.  Reports from individuals who we are prohibited by law from paying are ineligible for rewards.\n",
		"handle": "dropbox-acquisitions",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/005/012/c4b77396715714a3cf75f7b52bd7ab27014e1cc0_large.png?1440018000",
		"internet_bug_bounty": false
	},
	{
		"id": 695,
		"url": "/zaption",
		"name": "Zaption",
		"meta": {
			"bug_count": 58,
			"accepting_submissions": false
		},
		"about": "Interactive video for learning.",
		"stripped_policy": "No automated testing or contacting support staff -- we will ban.\nZaption is committed to maintaining the security of students and teachers. If you have discovered a security issue that you believe we should know about, we want to work with you. We do not offer monetary bounties for bugs at this time.\nRules (please read)\nNo automated testing. It tends to cause spam, excessive requests, and duplicate reports.\nDon't run tests that could jeopardize availability of the Zaption website (including excessive requests or denial-of-service attacks). If you accidentally DoS us, please report the suspected issue immediately. Do not attempt to reproduce.\nDon't test our rate-limiting. This includes creating excessive accounts, attempting to log-in excessively, etc.\nDo not run tests that send spam to our website. This includes excessive emails, comments, or flagging content as inappropriate. If you do this, you will be banned.\nIf you post a tour to the public Zaption Gallery, you must delete it after you have finished your testing to avoid polluting our site.\nNo social engineering attacks, submitting contact/order forms, or contacting our support staff.\nRead the scope and list of exclusions below, and make sure you don't submit anything that is on that list.\nWe receive many reports from researchers who do not read these rules. To prove that you've read and understood these rules, please include the word \"violin\" (spelled correctly) somewhere in your report. If you do not, your report will be closed as invalid.\nResponsible Disclosure\nWe ask that security researchers responsibly disclose vulnerabilities. That means you must disclose the vulnerability to Zaption only, avoid using it to disrupt the Zaption service or violate users' privacy, and give us a reasonable period of time to analyze and respond to your report. If you make a good faith effort to follow these guidelines, we promise not to bring any legal action against you.\nScope\nThe bug program applies only to reproducible technical vulnerabilities on www.zaption.com, zapt.io, or the official Zaption iOS app. It does not apply to third-party Zaption API consumers, physical attacks, or social engineering attacks.\nExclusions\nWe are aware of the following scenarios, and believe our risk is mitigated as effectively as possible at the current time. Please don't contact us about these.\nunencrypted HTTP connections are allowed (so no secure flag on cookies, no HSTS header, etc)\nframing is allowed on most pages (but not on settings page  or other pages with critical account functionality)\nwe don't set all HTTP headers or cookie flags (but believe the ones we have set provide all important protections)\nlogout, coupon redeem links, and autoload links are unprotected GET methods (but we believe this has no security implications)\nour \"randomizer\" tool allows open redirects (but we believe this is an acceptable risk for now)\nwe don't verify users' email addresses (but believe we've mitigated the security concerns around this)\nthere are various ways to check if a user exists at a given email address. we believe this is an acceptable risk and have placed rate limits on them if the request volume is large enough.\nthere are various ways to game the system to use \"Pro\" features without paying for them, or get free Pro time. We aren't very concerned about these, please don't report them. We'll notice if people start using them en masse, and deal with the issues then.\nour SMTP security policies are set as desired (this includes SPF, DKIM, and DMARC). We have evaluated other policies and decided on these for now.\nwe don't use DNSSEC\nwe are happy with our current rate limits (for brute-force attacks, enumeration attacks, etc).\nwe have not mitigated BREACH attacks, but believe they present an acceptable risk.\npasswords.zip is not what it appears to be, please don't report it\n",
		"handle": "zaption",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/695/06aa0209c5f30959b08bbd2d179577b2b3c1d186_large.?1418168795",
		"internet_bug_bounty": false
	},
	{
		"id": 1256,
		"url": "/skyportsystems",
		"name": "Skyport Systems",
		"meta": {
			"bug_count": 16,
			"accepting_submissions": false
		},
		"about": "Skyport Systems, Inc. delivers simple and effective secure-computing infrastructure for Enterprise applications.",
		"stripped_policy": "Skyport Systems takes trust and security seriously and investigates all reported vulnerabilities.  We are committed to working with security experts across the world to stay up to date with the latest security techniques. If you have discovered a security issue that you believe we should know about, we are happy to work with you to resolve the issue promptly.\nNote:  We are aware of a certain wordpress and dns/mx related best practices on our production site, which are static text files.  We are working to address these reports, if you have a finding that is a best practice around these areas, please check back later next week to see if the exposure is addressed.  As of 11/28/2016 the following domains are out-of-scope:  skyportblog.com, www.skyportsystems.com, www.skyportsystems.net. \nCoordinated disclosure rules:\nPlease let us know as soon as possible upon discovery of a potential security issue, and we’ll make every effort to quickly correct the issue.\nProvide us a reasonable amount of time to fix the issue before publishing it elsewhere.\nMaking a good faith effort to not leak, manipulate, or destroy any user data. Please only test against accounts you own yourself or with explicit permission of the account holder.\nPlease refrain from automated/scripted account creation.\nRules\nThis Program is limited strictly to technical vulnerabilities of Skyport Systems products and services.\nAny activity that would disrupt, damage or adversely affect any third party data, account or equipment is not allowed.\nThe following are strictly prohibited:\n   Attacks on Skyport Systems infrastructure or facilities\n   DOS attacks \n   Social Engineering attacks or phishing\n   Spamming\nResponsible Disclosure Period:  Please provide us reasonable time to research the submitted issues and during that time do not make information about the vulnerability public or further known in order to protect the security and privacy of our users.  \nThanks \nWe believe in recognizing the work of others. \nIf your work helps us improve the security of our service, we'd be happy to acknowledge your contribution (/SkyportSystems/thanks).\n",
		"handle": "skyportsystems",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/001/256/e7772c47d802c55eb18e306bcb49e362e1daf197_large.png?1428684798",
		"internet_bug_bounty": false
	},
	{
		"id": 438,
		"url": "/openfolio",
		"name": "Openfolio",
		"meta": {
			"bug_count": 45,
			"accepting_submissions": false,
			"minimum_bounty": 50,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Openfolio brings the principles and power of social networks – openness, connectivity, collective intelligence – to the world of personal investing.",
		"stripped_policy": "Openfolio Bug Bounty Program\nResponsible Disclosure\nResponsible disclosure includes: \n* Make a good faith effort to avoid privacy violations, destruction of data and interruption or degradation of our services\n* Do not access or modify data that does not belong to you\n* Do not make any information public until the issue has been resolved\nIn order to encourage responsible disclosure, we promise not to bring legal action against researchers who point out a problem provided they do their best to follow the above guidelines.\nEligibility\nOpenfolio reserves the right to decide if the minimum severity threshold is met and whether it was previously reported.\nIn general, anything which has the potential for financial loss or data breach is of sufficient severity, including:\n* XSS\n* CSRF\n* Authentication bypass or privilege escalation\n* Click jacking\n* Remote code execution\n* Obtaining user information\nIn general, the following would not meet the threshold for severity:\n* Vulnerabilities on sites hosted by third parties unless they lead to a vulnerability on the main website\n* Denial of service\n* Spamming\n* Previously reported bugs\nIf you are testing the comment feature, please delete any comments that are not an example of a vulnerability.\nAutomated Scanning\nIf you employ automated scanning tools, their requests must be rate limited to not exceed 2 requests per second without prior approval. Failure to do so may be considered a DoS attack and will result in disqualification from the program.\nAutomated vulnerability scanners commonly have low priority issues and/or false positives. Before submitting the results from a scanner, please take a moment to confirm that the reported issues are actually valid and exploitable. Please submit an issue only if you have a proof-of-concept (see Scope Exclusions, above)\nAttributes of a good report\nDetailed steps on reproducing the bug. If valuable, please include any screenshots, links you clicked on, pages visited, etc.\nQuality not quantity. Keep focused on the technical details and provide precise explanations; stay clear of off-topic commentary.\nProvide us with a concrete attack scenario. How will this impact Openfolio or our users?\nThank you for helping keep our community safe\n",
		"handle": "openfolio",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/438/f9b10ef1438c031fc3620a46fc6a95b0fdfd970f_large.png?1410385089",
		"internet_bug_bounty": false
	},
	{
		"id": 504,
		"url": "/blockio",
		"name": "Block.io",
		"meta": {
			"bug_count": 42,
			"accepting_submissions": false,
			"minimum_bounty": 10,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "The simple Bitcoin/Dogecoin/Litecoin API \u0026 Wallet.",
		"stripped_policy": "Block.io Bug Bounty Program\nBlock.io encourages responsible disclosure of security vulnerabilities through this bug bounty program. By helping us resolve potentially hazardous issues, you're keeping the Bitcoin/Dogecoin community safe.\nResponsible Disclosure\nResponsible disclosure includes:\nProviding us a reasonable amount of time to fix the issue before publishing it elsewhere.\nMaking a good faith effort to not leak or destroy any Block.io user data.\nNot defrauding Block.io users or Block.io itself in the process of discovery.\nIn order to encourage responsible disclosure, we promise not to bring legal action against researchers who point out a problem provided they do their best to follow the above guidelines.\nRewards\nThe minimum payout is $10 for reporting a previously unknown security vulnerability of sufficient severity with possibility for direct exploitation. There is no maximum reward, and we may award higher amounts based on severity or creativity of the vulnerability found. We may reward the minimum bounty in cases where our security is adjusted for better defense in depth, but no direct exploitation is possible.\nEligibility\nBlock.io reserves the right to decide if the minimum severity threshold is met and whether it was previously reported.\nIn general, anything which has the potential for financial loss or data breach is of sufficient severity, including:\nXSS\nAuthentication bypass or privilege escalation\nClick jacking\nRemote code execution\nObtaining user information\nIn general, the following would not meet the threshold for severity:\nVulnerabilities on sites hosted by third parties unless they lead to a vulnerability on the main website\nDenial of service\nSpamming\nVulnerabilities in third party applications which make use of the Block.io API\nImportant: When reporting a vulnerability, you must provide an attack scenario and/or examples of the attack. Without this, we reserve the right to reject the bug as Not Applicable.\nThank you for your service!\n",
		"handle": "blockio",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/504/699024143496fa76260e49552ac30dbb739c13c7_large.png?1413241197",
		"internet_bug_bounty": false
	},
	{
		"id": 266,
		"url": "/jsdelivr",
		"name": "jsDelivr",
		"meta": {
			"bug_count": 10,
			"accepting_submissions": false
		},
		"about": "jsDelivr is an open source and public CDN for developers and webmaters",
		"stripped_policy": "jsDelivr is used by thousands of websites around the world and they all rely on malware-free and reliable file delivery. \nWe take the security of our CDN very seriously and want to ensure our service is bulletproof.\nScope\nExcept from static file delivery we also have a dynamic /g/ functionality which can combine on the fly multiple files and output them to the user. Documentation (https://github.com/jsdelivr/jsdelivr#load-multiple-files-with-single-http-request) \nTests on /g/ itself can be done on the server http://staging.jsdelivr.net/. \n(Note: the root domain redirects to www.jsdelivr.com which is out of scope. You need to provide a path to test it)\nIt is not used in production but it is clone of the actual server and can be used for penetration tests. \nHTTPS or other vulnerabilities can be tested on cdn.jsdelivr.net as long as they don't pose a real threat to live users. \nWe expect vulnerability reports for any server or service owned or used by jsDelivr, including DNS, CDN providers, load balancing algorithm, VPS, installed software and anything else that can be used in a harmful way.\nOur website www.jsdelivr.com is out of scope for these tests as it does not contain any user information and it is completely isolated from the CDN infrastructure.\n",
		"handle": "jsdelivr",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/266/25c1c8543a490604705467b2bd4930f25d3cd9f4_large.png?1403992484",
		"internet_bug_bounty": false
	},
	{
		"id": 222,
		"url": "/fanfootage",
		"name": "FanFootage",
		"meta": {
			"bug_count": 36,
			"accepting_submissions": false
		},
		"about": "Film and upload your videos and watch previous shows back from all fan angles on FanFootage",
		"stripped_policy": "This program is now closed . Thanks for all the reports.\n",
		"handle": "fanfootage",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/222/42f00d38caee6986c477a85e75c3967360347476_large.png?1401800415",
		"internet_bug_bounty": false
	},
	{
		"id": 75,
		"url": "/c2fo",
		"name": "C2FO",
		"meta": {
			"bug_count": 47,
			"accepting_submissions": false
		},
		"about": "Revolutionizing working capital to make businesses better.",
		"stripped_policy": "C2FO shares and appreciates your attention to security issues.\nThe safety of all data is our top priority; an absolute prerequisite for any business transaction C2FO may conduct. Support from our stakeholders and conscientious third parties augments our own vigilance in shielding customers from each and every detectable security risk.\nRules of Engagement\nScope\nThe following URI and their subpages are within the scope of this program\n1) https://c2fo.com\n2) https://app.c2fo.com\n3) https://admin.c2fo.com\nC2FO does not accept bug reports outside of this scope.\nBug Submission\nC2FO maintains the following submission requirements for bugs:\n1) Each bug should have its own entry. Entries which contain multiple bugs will be closed with a \"Not Applicable\" designation with appropriate verbiage informing you of this rule.\n2) All bugs must contain an actionable and applicable proof-of-concept. Issues without a POC will be closed with a \"Not Applicable\" designation with appropriate verbiage informing you of this rule. An example of a POC violating this rule is the submission of a clickjacking finding which doesn't reference a URI which takes sensitive information (i.e. credentials) as input.\n3) Bugs for missing \"security\" settings (i.e. SPF records, HTTP headers, etc) are not expected unless the submitter can provide a POC in accordance with rule 2 which demonstrates how the missing setting either allows the attacker to exploit the system or provide leverage leading to system exploitation.\nItems which are not in scope for bounties\nThe following finding types are specifically excluded from the bounty:\n- Descriptive error messages (e.g. Stack Traces, application or server errors).\n- Login Page / Forgot Password Page Account Brute force or account lockout not enforced.\n- HTTP 404 codes/pages or other HTTP non-200 codes/pages.\n- Banner disclosure on common/public services.\n- Disclosure of known public files or directories, (e.g. robots.txt).\n- Clickjacking and issues only exploitable through clickjacking.\n- Self-XSS and issues exploitable only through Self-XSS.\n- CSRF on forms that are available to anonymous users (e.g. the contact form).\n- Logout Cross-Site Request Forgery (logout CSRF).\n- Presence of application or web browser ‘autocomplete’ or ‘save password\nThe Lack of Security Headers\nC2FO does not consider the absence of security headers a vulnerability. They are a possible remediation measure at best and the presence of the item they protect against is the security vulnerability. All submissions of these finding types will be returned as not applicable.\nC2FO Response\nC2FO will verify and respond to all new vulnerabilities by 1000 Central time Monday through Friday. Once C2FO accepts a vulnerability for remedation, C2FO will provide weekly updates on Friday at 1000 Central time until the issue is closed.\nBounties\nC2FO currently does not offer cash bounties. All successful bugs are noted here (https://hackerone.com/c2fo/thanks). We are currently designing a reward program and will update this page when it becomes available.\nThank You\nC2FO would like to thank several individuals for help in discovering a vulnerability in one of our products. Thank you! (https://hackerone.com/c2fo/thanks)\n",
		"handle": "c2fo",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/075/90b34a501a3e58e8c612de11832badd2716cda00_large.png?1396035932",
		"internet_bug_bounty": false
	},
	{
		"id": 57,
		"url": "/howaboutwe",
		"name": "HowAboutWe",
		"meta": {
			"bug_count": 9,
			"accepting_submissions": false
		},
		"about": "",
		"stripped_policy": "HowAboutWe is committed to working with security experts across the globe to stay up to date with the latest security techniques. If you have discovered a security issue that you believe we should know about, we'd welcome working with you. Please let us know about it and we'll make every effort to correct the issue.\nRULES\nJust a few simple rules before you get started. Please...\nmake a good faith effort to respect privacy. Do not interact with other people without their permission.\nlimit any security testing to the www.howaboutwe.com domain, our iOS app (https://itunes.apple.com/us/app/howaboutwe-dating-find-singles/id439078709), or our Android app (https://play.google.com/store/apps/details?id=com.howaboutwe.singles). Other areas are not in scope at this time.\ndo not submit feature suggestions or other \"best practices\". We're still a growing start-up with a number of security improvements on our road map.\nTHANKS\nWe believe in recognizing the work of others. If your work helps us improve the security of our service, we'd be happy to acknowledge your contribution in our Hall of Fame (https://hackerone.com/howaboutwe/thanks). \n",
		"handle": "howaboutwe",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/057/d01ab22137af847f6759f947bb03263ac382af83_large.png?1393016375",
		"internet_bug_bounty": false
	},
	{
		"id": 54,
		"url": "/okcupid",
		"name": "OkCupid",
		"meta": {
			"bug_count": 168,
			"accepting_submissions": false
		},
		"about": "Join the best dating site on Earth.",
		"stripped_policy": "OkCupid values the work done by security researchers in improving the security of our products and service offerings. We are committed to working with this community to verify, reproduce, and respond to legitimate reported vulnerabilities. We encourage the community to participate in our responsible reporting process. \nScope\nVulnerabilities on all OkCupid owned domains are covered under this program. Specifically:\n*.okcupid.com\n*.okccdn.com (non-Akamai domains)\nResponsible Disclosure\nGive the OkCupid security team a reasonable amount of time to respond to, and correct, the reported vulnerability before making any information public.\nUser Data\nPlease make a good faith effort to not violate anyone else's privacy during your testing. We explicitly request that the following user information not be accessed during testing:\nUser messages. \nUser chat logs.\nUser private answers.\nLogging in as users/impersonating users.\nScope Exclusions\nThe following conditions are out of scope for the security bug program:\nPhysical attacks against OkCupid offices and data centers.\nSocial engineering of our service desk, employees or contractors.\nIssues related to networking protocols or industry standards not controlled by OkCupid.\nAny vulnerability obtained through the compromise of a OkCupid user or employee accounts, if you need to test a vulnerability create a free account, don’t take someone else’s. \nAny vulnerability found through the use of any mass scanning tool, botnet, compromised site, end-clients or any other means of large automated exploitation or use of a tool that generates a significant volume of traffic.\nThanks\nWe believe in giving credit where credit is due. If your work helps us improve the security of our service, we'll gladly recognize your discovery in our Hall of Fame. \nWe are currently not paying a monetary reward for bugs.\n",
		"handle": "okcupid",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/054/c3793938ef976a7a46a1c0bb3b56f13fa3976072_large.jpg?1392928046",
		"internet_bug_bounty": false
	},
	{
		"id": 51,
		"url": "/invision",
		"name": "InVision",
		"meta": {
			"bug_count": 249,
			"accepting_submissions": false,
			"minimum_bounty": 100,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "Prototyping \u0026 Collaboration for Design Teams",
		"stripped_policy": "** Effective 11/10/16 - We are currently not accepting submissions while we remediate existing reports. **\nWe realize that your work is your pride and joy. We've gone to extensive measures to help protect it from prying eyes. If you believe we've overlooked something, please let us know! We will investigate all severe reports and will work with you to fix the problem.\nWhat will not be rewarded (PLEASE READ CAREFULLY)\nDuplicate submissions that are being remediated\nMultiple reports for the same vulnerability type with minor differences (only one will be rewarded)\nRate limiting\nEmail bombs\nCVE Vulnerabilities released within the last 90 days (please allow our patch cycle to work)\nNetworking issues or industry standards outside of InVision's control\nSPF or DMARC records\nGmail \"+\" and \".\" acceptance\nDescriptive error messages (e.g. Stack Traces, application or server errors)\nHTTP 404 codes/pages or other HTTP non-200 codes/pages\nFingerprinting / banner disclosure on common/public services\nDisclosure of known public files or directories, (e.g. robots.txt)\nClickjacking and issues only exploitable through clickjacking\nCSRF on forms that are available to anonymous users (e.g. the contact form)\nLogout Cross-Site Request Forgery (logout CSRF)\nWeak CSRF in the APIs\nPresence of application or web browser ‘autocomplete’ or ‘save password’ functionality\nLack of Secure/HTTPOnly flags on non-sensitive Cookies\nLack of Security Speedbump when leaving the site\nLack of Captcha\nForgot Password page brute force and account lockout not enforced\nOpen redirect\nOPTIONS HTTP method enabled\nUsername / email enumeration\nvia Login Page error message\nvia Forgot Password error message\nMissing HTTP security headers, specifically (https://www.owasp.org/index.php/ListofusefulHTTPheaders), e.g.\nStrict-Transport-Security\nX-Frame-Options\nX-XSS-Protection\nX-Content-Type-Options\nContent-Security-Policy, X-Content-Security-Policy, X-WebKit-CSP\nContent-Security-Policy-Report-Only\nSSL Issues, e.g.\nSSL Attacks such as BEAST, BREACH, Renegotiation attack\nSSL Forward secrecy not enabled\nSSL weak / insecure cipher suites\nTHANKS\nWe believe in giving credit where credit is due. If your work helps us improve the security of our service, we'll gladly recognize your discovery in our Hall of Fame (https://hackerone.com/invision/thanks).\nMonetary Bounties\nRewards are based on a variety factors however mostly influenced by severity. We'll consider your report eligible if it could compromise the integrity of InVision user data, circumvent the security protections of InVision user data, or enable access to a system within our infrastructure.\n",
		"handle": "invision",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/051/4fbc48e5abb7be4a3a8178183c21985a2f10ca10_large.png?1397215793",
		"internet_bug_bounty": false
	},
	{
		"id": 46,
		"url": "/ibb-flash",
		"name": "Flash (IBB)",
		"meta": {
			"bug_count": 69,
			"accepting_submissions": false,
			"minimum_bounty": 2000,
			"default_currency": "usd",
			"offers_bounties": true
		},
		"about": "",
		"stripped_policy": "As of August 22nd 2016, the Internet Bug Bounty is no longer awarding bounties for Flash. We'd like to extend our sincere thanks to the researchers who have helped resolve almost 70 vulnerabilities over these last three years. Eliminating these vulnerabilities combined with significant engineering efforts from Adobe and further hardening from browser vendors, Flash exploitation no longer has the same impact as when we started. Thank you!\nThe Internet Bug Bounty will be shifting these resources towards the our bounties covering open source infrastructure.\nIf you have any questions, please contact us at panel@internetbugbounty.org\nThe Internet Bug Bounty is issuing rewards for vulnerabilities in the Adobe Flash Player. Flash Player is ubiquitously installed across the world’s desktop machines, and is one of the few browser plug-ins that is run by default across different browsers.\nQualifying vulnerability classes\nRemote code execution\nSame-origin-policy violations\nFlash-specific sandbox escapes (e.g. memory corruption in the Flash broker)\nQualifying host browsers\nChrome\nInternet Explorer\nFirefox\nSafari on OS X\nMicrosoft Office\nAdditional guidance\nReport your discovery directly to Adobe PSIRT (http://helpx.adobe.com/security/alertus.html). Submit your finding here after the issue has been resolved and publicly acknowledged in a security advisory. At this time, we are only awarding vulnerabilities that have been disclosed directly to Adobe.\nThe Panel is a group of your peers serving as volunteers. They have limited amount of free time to deeply investigate bugs, so they kindly request that you write clear, concise reports detailing the nature and impact of the finding.\nA sandbox escape is not required. We anticipate that most rewards will be for memory corruptions that manifest within the confines of a sandbox.\nFor same-origin-policy violations, a plausible attack against a popular web site should be demonstrated.\nFor memory corruption issues, likely exploitability must be shown. Demonstrating full exploitation is helpful but not required to qualify.\nReports of browser-agnostic vulnerabilities are preferred, but any serious vulnerability is likely to qualify even if impact can only be demonstrated in one of the popular browsers.\nBounty guidance\nMinimum reward of $2,000, with $5,000+ being achievable with a good proof-of-concept and write-up.\n",
		"handle": "ibb-flash",
		"profile_picture": "https://profile-photos.hackerone-user-content.com/production/000/000/046/5b762dea6a4dc5b2a8385659411ad2b4479411a1_large.png?1392266609",
		"internet_bug_bounty": true
	}],
	"show_sort": true
}